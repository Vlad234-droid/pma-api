<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.objective.dao.ObjectiveDAO">

    <resultMap id="groupObjectiveResultMap" type="com.tesco.pma.objective.domain.GroupObjective">
        <id property="uuid" column="uuid"/>
        <result property="businessUnitUuid" column="business_unit_uuid"/>
        <result property="performanceCycleUuid" column="performance_cycle_uuid"/>
        <result property="sequenceNumber" column="sequence_number"/>
        <result property="title" column="title"/>
        <result property="version" column="version"/>
        <result property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.objective.domain.ObjectiveStatus"/>
    </resultMap>

    <resultMap id="personalObjectiveResultMap" type="com.tesco.pma.objective.domain.PersonalObjective">
        <id property="uuid" column="uuid"/>
        <result property="colleagueUuid" column="colleague_uuid"/>
        <result property="performanceCycleUuid" column="performance_cycle_uuid"/>
        <result property="sequenceNumber" column="sequence_number"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="meets" column="meets"/>
        <result property="exceeds" column="exceeds"/>
        <result property="groupObjectiveUuid" column="group_objective_uuid"/>
        <result property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.objective.domain.ObjectiveStatus"/>
    </resultMap>

    <resultMap id="workingGroupObjectiveResultMap" type="com.tesco.pma.objective.domain.WorkingGroupObjective">
        <id property="businessUnitUuid" column="business_unit_uuid"/>
        <id property="performanceCycleUuid" column="performance_cycle_uuid"/>
        <id property="sequenceNumber" column="sequence_number"/>
        <result property="version" column="version"/>
        <result property="groupObjectiveUuid" column="objective_uuid"/>
        <result property="updaterId" column="updated_by"/>
        <result property="updateTime" column="updated_time"/>
    </resultMap>

    <insert id="createGroupObjective" flushCache="true">
        INSERT INTO group_objective
        (uuid,
         business_unit_uuid,
         performance_cycle_uuid,
         sequence_number,
         title,
         version,
         status_id)
        VALUES (#{groupObjective.uuid},
                #{groupObjective.businessUnitUuid},
                #{groupObjective.performanceCycleUuid},
                #{groupObjective.sequenceNumber},
                #{groupObjective.title},
                #{groupObjective.version},
                #{groupObjective.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.objective.domain.ObjectiveStatus})
    </insert>

    <select id="getGroupObjective" resultMap="groupObjectiveResultMap">
        SELECT go.uuid,
               go.business_unit_uuid,
               go.performance_cycle_uuid,
               go.sequence_number,
               go.title,
               go.version,
               go.status_id
        FROM group_objective go
        WHERE go.uuid = #{groupObjectiveUuid}
    </select>

    <select id="getAllGroupObjectives" resultMap="groupObjectiveResultMap">
        SELECT go.uuid,
               go.business_unit_uuid,
               go.performance_cycle_uuid,
               go.sequence_number,
               go.title,
               go.version,
               go.status_id
        FROM working_group_objective wgo
                 inner join group_objective go
        on (wgo.objective_uuid = go.uuid)
        WHERE wgo.business_unit_uuid = #{businessUnitUuid}
          and wgo.performance_cycle_uuid = #{performanceCycleUuid}
        order by go.sequence_number
    </select>

    <update id="updateGroupObjective" flushCache="true">
        UPDATE group_objective
        SET title    = #{groupObjective.title},
            version  = #{groupObjective.version},
            status_id=#{groupObjective.status.id}
        WHERE uuid = #{groupObjective.uuid}
    </update>

    <delete id="deleteGroupObjective">
        DELETE
        FROM group_objective
        WHERE uuid = #{groupObjectiveUuid}
    </delete>

    <insert id="createPersonalObjective" flushCache="true">
        INSERT INTO personal_objective
        (uuid,
        colleague_uuid,
        performance_cycle_uuid,
        sequence_number,
        title,
        description,
        meets,
        exceeds,
        status_id)
        VALUES (#{personalObjective.uuid},
        #{personalObjective.colleagueUuid},
        #{personalObjective.performanceCycleUuid},
        #{personalObjective.sequenceNumber},
        #{personalObjective.title},
        #{personalObjective.description},
        #{personalObjective.meets},
        #{personalObjective.exceeds},
        #{personalObjective.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.objective.domain.ObjectiveStatus});
        <choose>
            <when test="personalObjective.groupObjectiveUuid != null">
                INSERT INTO objective_link
                (personal_objective_uuid,
                group_objective_uuid)
                VALUES (#{personalObjective.uuid},
                #{personalObjective.groupObjectiveUuid}
                );
            </when>
        </choose>
    </insert>

    <select id="getPersonalObjective" resultMap="personalObjectiveResultMap">
        SELECT po.uuid,
               po.colleague_uuid,
               po.performance_cycle_uuid,
               po.sequence_number,
               po.title,
               po.description,
               po.meets,
               po.exceeds,
               po.status_id,
               ol.group_objective_uuid
        FROM personal_objective po
                 LEFT JOIN objective_link ol
                           ON (po.uuid = ol.personal_objective_uuid)
        WHERE po.uuid = #{personalObjectiveUuid}
    </select>

    <!-- cascade delete -->
    <delete id="deletePersonalObjective">
        DELETE
        FROM personal_objective
        WHERE uuid = #{personalObjectiveUuid}
    </delete>

    <update id="updatePersonalObjective" flushCache="true">
        UPDATE personal_objective
        SET title = #{personalObjective.title},
        description = #{personalObjective.description},
        meets = #{personalObjective.meets},
        exceeds = #{personalObjective.exceeds},
        status_id=#{personalObjective.status.id}
        WHERE uuid = #{personalObjective.uuid};
        <choose>
            <when test="personalObjective.groupObjectiveUuid == null">
                DELETE
                FROM objective_link
                WHERE personal_objective_uuid = #{personalObjective.uuid};
            </when>
            <otherwise>
                INSERT INTO objective_link
                (personal_objective_uuid,
                group_objective_uuid)
                VALUES (#{personalObjective.uuid},
                #{personalObjective.groupObjectiveUuid}
                )
                ON CONFLICT (personal_objective_uuid)
                DO UPDATE
                SET group_objective_uuid = EXCLUDED.group_objective_uuid
                where objective_link.group_objective_uuid != EXCLUDED.group_objective_uuid;
            </otherwise>
        </choose>
    </update>

    <insert id="createWorkingGroupObjective" flushCache="true">
        INSERT INTO working_group_objective
        (business_unit_uuid,
         performance_cycle_uuid,
         sequence_number,
         version,
         objective_uuid,
         updated_by,
         updated_time)
        VALUES (#{workingGroupObjective.businessUnitUuid},
                #{workingGroupObjective.performanceCycleUuid},
                #{workingGroupObjective.sequenceNumber},
                #{workingGroupObjective.version},
                #{workingGroupObjective.groupObjectiveUuid},
                #{workingGroupObjective.updaterId},
                #{workingGroupObjective.updateTime})
    </insert>

    <update id="updateWorkingGroupObjective" flushCache="true">
        UPDATE working_group_objective
        SET version        = #{workingGroupObjective.version},
            objective_uuid = #{workingGroupObjective.groupObjectiveUuid},
            updated_by     = #{workingGroupObjective.updaterId},
            updated_time   = #{workingGroupObjective.updateTime}
        WHERE business_unit_uuid = #{workingGroupObjective.businessUnitUuid}
          and performance_cycle_uuid = #{workingGroupObjective.performanceCycleUuid}
          and sequence_number = #{workingGroupObjective.sequenceNumber}
    </update>

    <select id="getWorkingGroupObjective" resultMap="workingGroupObjectiveResultMap">
        SELECT *
        FROM working_group_objective
        WHERE business_unit_uuid = #{businessUnitUuid}
          and performance_cycle_uuid = #{performanceCycleUuid}
          and sequence_number = #{sequenceNumber}
    </select>

    <delete id="deleteWorkingGroupObjective">
        DELETE
        FROM working_group_objective
        WHERE business_unit_uuid = #{businessUnitUuid}
          and performance_cycle_uuid = #{performanceCycleUuid}
          and sequence_number = #{sequenceNumber}
    </delete>

</mapper>