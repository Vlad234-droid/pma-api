<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.review.dao.ReviewDAO">

    <resultMap id="groupObjectiveResultMap" type="com.tesco.pma.review.domain.GroupObjective">
        <id property="uuid" column="uuid"/>
        <result property="businessUnitUuid" column="business_unit_uuid"/>
        <result property="number" column="number"/>
        <result property="title" column="title"/>
        <result property="version" column="version"/>
    </resultMap>

    <resultMap id="reviewResultMap" type="com.tesco.pma.review.domain.Review">
        <id property="uuid" column="uuid"/>
        <result property="colleagueUuid" column="colleague_uuid"/>
        <result property="performanceCycleUuid" column="performance_cycle_uuid"/>
        <result property="type" column="type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMReviewType"/>
        <result property="number" column="number"/>
        <result property="properties" column="properties"
                typeHandler="com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler"
                javaType="com.tesco.pma.api.MapJson"/>
        <result property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMReviewStatus"/>
    </resultMap>

    <resultMap id="colleagueReviewsResultMap" type="com.tesco.pma.review.domain.ColleagueTimeline">
        <id property="uuid" column="uuid"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="jobName" column="job_name"/>
        <result property="businessType" column="business_type"/>
        <collection property="reviews" ofType="com.tesco.pma.review.domain.SimplifiedReview">
            <id property="uuid" column="review_uuid"/>
            <result property="type" column="review_type_id"
                    typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                    javaType="com.tesco.pma.cycle.api.PMReviewType"/>
            <result property="status" column="review_status_id"
                    typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                    javaType="com.tesco.pma.cycle.api.PMReviewStatus"/>
            <result property="number" column="review_number"/>
        </collection>
    </resultMap>

    <resultMap id="workingGroupObjectiveResultMap" type="com.tesco.pma.review.domain.WorkingGroupObjective">
        <id property="businessUnitUuid" column="business_unit_uuid"/>
        <id property="version" column="version"/>
        <result property="updaterId" column="updated_by"/>
        <result property="updateTime" column="updated_time"/>
    </resultMap>

    <resultMap id="cycleReviewTypePropertiesResultMap" type="com.tesco.pma.review.domain.PMCycleReviewTypeProperties">
        <id property="cycleUuid" column="cycle_uuid"/>
        <result property="type" column="review_type_code" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
        <result property="min" column="min"/>
        <result property="max" column="max"/>
    </resultMap>

    <resultMap id="reviewStatsResultMap" type="com.tesco.pma.review.domain.ReviewStats">
        <id property="cycleUuid" column="cycle_uuid"/>
        <result property="colleagueUuid" column="colleague_uuid"/>
        <result property="type" column="review_type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMReviewType"/>
        <collection property="statusStats" ofType="com.tesco.pma.review.domain.ReviewStatusCounter">
            <id property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMReviewStatus"/>
            <result property="count" column="cnt"/>
        </collection>
    </resultMap>

    <resultMap id="cycleTimelinePointResultMap" type="com.tesco.pma.review.domain.PMCycleTimelinePoint">
        <result property="cycleUuid" column="cycle_uuid"/>
        <result property="code" column="timeline_code"/>
        <result property="description" column="timeline_description"/>
        <result property="type" column="element_type_code" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
        <result property="reviewType" column="review_type_code" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
        <result property="startDate" column="start_date" typeHandler="org.apache.ibatis.type.LocalDateTypeHandler"/>
    </resultMap>

    <insert id="createGroupObjective" flushCache="true">
        INSERT INTO group_objective
        (uuid,
         business_unit_uuid,
         number,
         title,
         version)
        VALUES (#{groupObjective.uuid},
                #{groupObjective.businessUnitUuid},
                #{groupObjective.number},
                #{groupObjective.title},
                #{groupObjective.version})
    </insert>

    <select id="getGroupObjective" resultMap="groupObjectiveResultMap">
        SELECT go.uuid,
               go.business_unit_uuid,
               go.number,
               go.title,
               go.version
        FROM group_objective go
        WHERE go.uuid = #{groupObjectiveUuid}
    </select>

    <select id="getGroupObjectivesByBusinessUnitUuid" resultMap="groupObjectiveResultMap">
        with max_version as (
        <include refid="getMaxVersion">
            <property name="businessUnitUuid" value="#{businessUnitUuid}"/>
        </include>
        )
        select go.uuid,
        go.business_unit_uuid,
        go.number,
        go.title,
        go.version
        from group_objective go
        inner join max_version mv
        on (go.version = mv.version)
        WHERE go.business_unit_uuid = #{businessUnitUuid}
        order by go.number
    </select>

    <select id="getWorkingGroupObjectivesByBusinessUnitUuid" resultMap="groupObjectiveResultMap">
        with working_version as (
            select version
            from working_group_objective wgo
            where wgo.business_unit_uuid = #{businessUnitUuid}
        )
        select go.uuid,
               go.business_unit_uuid,
               go.number,
               go.title,
               go.version
        from group_objective go
         inner join working_version wv
        on (go.version = wv.version)
        WHERE go.business_unit_uuid = #{businessUnitUuid}
        order by go.number
    </select>

    <delete id="deleteGroupObjective">
        DELETE
        FROM group_objective
        WHERE uuid = #{groupObjectiveUuid}
    </delete>

    <select id="getMaxVersionGroupObjective" resultType="int">
        <include refid="getMaxVersion">
            <property name="businessUnitUuid" value="#{businessUnitUuid}"/>
        </include>
    </select>

    <insert id="createReview" flushCache="true">
        INSERT INTO review
        (uuid,
         colleague_uuid,
         performance_cycle_uuid,
         type_id,
         number,
         properties,
         status_id)
        VALUES (#{review.uuid},
                #{review.colleagueUuid},
                #{review.performanceCycleUuid},
                #{review.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMReviewType},
                #{review.number},
                #{review.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
                #{review.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMReviewStatus});
    </insert>

    <select id="getReview" resultMap="reviewResultMap">
        SELECT r.uuid,
               r.colleague_uuid,
               r.performance_cycle_uuid,
               r.type_id,
               r.number,
               r.properties,
               r.status_id
        FROM review r
        WHERE r.colleague_uuid = #{colleagueUuid}
          and r.performance_cycle_uuid = #{performanceCycleUuid}
          and r.type_id = #{type.id}
          and r.number = #{number}
    </select>

    <select id="read" resultMap="reviewResultMap">
        SELECT r.uuid,
               r.colleague_uuid,
               r.performance_cycle_uuid,
               r.type_id,
               r.number,
               r.properties,
               r.status_id
        FROM review r
        WHERE r.uuid = #{uuid}
    </select>

    <select id="getReviews" resultMap="reviewResultMap">
        SELECT r.uuid,
               r.colleague_uuid,
               r.performance_cycle_uuid,
               r.type_id,
               r.number,
               r.properties,
               r.status_id
        FROM review r
        WHERE r.colleague_uuid = #{colleagueUuid}
          and r.performance_cycle_uuid = #{performanceCycleUuid}
          and r.type_id = #{type.id}
        order by r.number
    </select>

    <select id="getTeamReviews" resultMap="colleagueReviewsResultMap">
        select c.uuid,
               c.first_name,
               c.last_name,
               j.name          as job_name,
               d.business_type as business_type,
               r.uuid          as review_uuid,
               r.type_id       as review_type_id,
               r.status_id     as review_status_id,
               r.number        as review_number
        from colleague c
                 inner join job j
                            on (j.id = c.job_id)
                 inner join department d
                            on (d.id = c.department_id)
                 left join review r
                           on (c.uuid = r.colleague_uuid)
        where c.manager_uuid = #{managerUuid}
        order by c.last_name, c.first_name, r.type_id, r.status_id, r.uuid
    </select>

    <delete id="deleteReview">
        DELETE
        FROM review r
        WHERE r.colleague_uuid = #{colleagueUuid}
        and r.performance_cycle_uuid = #{performanceCycleUuid}
        and r.type_id = #{type.id}
        and r.number = #{number}
        <if test="allowedReviewStatuses != null and !allowedReviewStatuses.isEmpty()">
            and r.status_id in
            <foreach item="allowedStatus" collection="allowedReviewStatuses" separator="," open="(" close=")">
                #{allowedStatus.id}
            </foreach>
        </if>
    </delete>

    <update id="renumerateReviews" flushCache="true">
        update review
        set number = number - 1
        WHERE colleague_uuid = #{colleagueUuid}
          and performance_cycle_uuid = #{performanceCycleUuid}
          and type_id = #{type.id}
          and number >= #{startNumber}
    </update>

    <update id="updateReview" flushCache="true">
        UPDATE review
        SET properties =
        #{review.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
        status_id = #{review.status.id}
        WHERE performance_cycle_uuid = #{review.performanceCycleUuid}
        and colleague_uuid = #{review.colleagueUuid}
        and type_id = #{review.type.id}
        and number = #{review.number}
        <if test="allowedReviewStatuses != null and !allowedReviewStatuses.isEmpty()">
            and status_id in
            <foreach item="allowedStatus" collection="allowedReviewStatuses" separator="," open="(" close=")">
                #{allowedStatus.id}
            </foreach>
        </if>
    </update>

    <update id="updateReviewStatus" flushCache="true">
        update review r
        SET status_id=#{newStatus.id}
        WHERE r.colleague_uuid = #{colleagueUuid}
        and r.performance_cycle_uuid = #{performanceCycleUuid}
        and r.type_id = #{type.id}
        and r.number = #{number}
        <if test="prevReviewStatuses != null and !prevReviewStatuses.isEmpty()">
            and r.status_id in
            <foreach item="prevStatus" collection="prevReviewStatuses" separator="," open="(" close=")">
                #{prevStatus.id}
            </foreach>
        </if>
    </update>

    <insert id="insertOrUpdateWorkingGroupObjective" flushCache="true">
        INSERT INTO working_group_objective
        (business_unit_uuid,
         version,
         updated_by,
         updated_time)
        VALUES (#{workingGroupObjective.businessUnitUuid},
                #{workingGroupObjective.version},
                #{workingGroupObjective.updaterId},
                #{workingGroupObjective.updateTime}) ON CONFLICT (business_unit_uuid)
                DO
        UPDATE
            SET version = EXCLUDED.version,
            updated_by = EXCLUDED.updated_by,
            updated_time = EXCLUDED.updated_time
        WHERE working_group_objective.business_unit_uuid = EXCLUDED.business_unit_uuid;
    </insert>

    <select id="getWorkingGroupObjective" resultMap="workingGroupObjectiveResultMap">
        SELECT *
        FROM working_group_objective
        WHERE business_unit_uuid = #{businessUnitUuid}
    </select>

    <delete id="deleteWorkingGroupObjective">
        DELETE
        FROM working_group_objective
        WHERE business_unit_uuid = #{businessUnitUuid}
    </delete>

    <sql id="getMaxVersion">
        select coalesce(max(version), 0) as version
        from group_objective go
        where go.business_unit_uuid = #{businessUnitUuid}
    </sql>

    <select id="getPMCycleReviewTypeProperties" resultMap="cycleReviewTypePropertiesResultMap">
        select r.cycle_uuid,
               upper(json_extract_path_text(r.timeline_points, 'reviewType')) as review_type_code,
               json_extract_path_text(r.timeline_points, 'properties', 'pm_review_min') as min,
       json_extract_path_text(r.timeline_points, 'properties', 'pm_review_max') as max
        from (select c.uuid as cycle_uuid,
            json_array_elements((metadata -> 'cycle' -> 'timelinePoints')::json) as timeline_points
            from pm_cycle c
            where c.uuid = #{cycleUuid}) as r
        where upper (json_extract_path_text(r.timeline_points
            , 'type')) = 'REVIEW'
          and upper (json_extract_path_text(r.timeline_points
            , 'reviewType')) = #{type}
    </select>

    <select id="getReviewStats" resultMap="reviewStatsResultMap">
        select r.performance_cycle_uuid as cycle_uuid,
               r.colleague_uuid,
               r.type_id                as review_type_id,
               r.status_id,
               count(*)                 as cnt
        from review r
        where r.performance_cycle_uuid = #{cycleUuid}
          and r.colleague_uuid = #{colleagueUuid}
          and r.type_id = #{type.id}
        group by r.performance_cycle_uuid,
                 r.colleague_uuid,
                 r.type_id,
                 r.status_id
    </select>

    <select id="getTimeline" resultMap="cycleTimelinePointResultMap">
        with timeline_point_enriched as (
            select tp.cycle_uuid,
                   json_extract_path_text(tp.timeline_point, 'code')                  as timeline_code,
                   json_extract_path_text(tp.timeline_point, 'description')           as timeline_description,
                   upper(json_extract_path_text(tp.timeline_point, 'type'))           as element_type_code,
                   upper(json_extract_path_text(tp.timeline_point, 'reviewType'))     as review_type_code,
                   json_extract_path_text(tp.timeline_point, 'properties', 'pm_type') as props_type,
                   tp.timeline_point
            from (select c.uuid                                                                 as cycle_uuid,
                         json_array_elements((metadata -> 'cycle' -> 'timelinePoints')::json) as timeline_point
                  from pm_cycle c
                  where c.uuid = #{cycleUuid}) as tp)
        select tpe.cycle_uuid,
               tpe.timeline_code,
               tpe.timeline_description,
               tpe.element_type_code,
               tpe.review_type_code,
               to_date(json_extract_path_text(tpe.timeline_point, 'properties',
                                              concat('pm_', tpe.props_type, '_start_time')),
                       'YYYY-MM-DD')                                                 as start_date,
               json_extract_path_text(tpe.timeline_point, 'properties',
                                      concat('pm_', tpe.props_type, '_start_delay')) as start_delay
        from timeline_point_enriched tpe
        order by json_extract_path_text(tpe.timeline_point, 'properties', concat('pm_', tpe.props_type, '_start_time'))
    </select>
</mapper>