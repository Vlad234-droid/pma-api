<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.review.dao.ReviewDAO">

    <resultMap id="reviewResultMap" type="com.tesco.pma.review.domain.Review">
        <id property="uuid" column="uuid"/>
        <result property="tlPointUuid" column="tl_point_uuid"/>
        <result property="type" column="type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMReviewType"/>
        <result property="number" column="number"/>
        <result property="properties" column="properties"
                typeHandler="com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler"
                javaType="com.tesco.pma.api.MapJson"/>
        <result property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMTimelinePointStatus"/>
        <result property="lastUpdatedTime" column="last_updated_time"/>
        <result property="changeStatusReason" column="change_reason"/>
    </resultMap>

    <resultMap id="colleagueReviewsResultMap" type="com.tesco.pma.review.domain.ColleagueTimeline">
        <id property="uuid" column="uuid"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="jobName" column="job_name"/>
        <result property="businessType" column="business_type"/>
        <collection property="reviews" ofType="com.tesco.pma.review.domain.SimplifiedReview">
            <id property="uuid" column="review_uuid"/>
            <result property="type" column="review_type_id"
                    typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                    javaType="com.tesco.pma.cycle.api.PMReviewType"/>
            <result property="status" column="review_status_id"
                    typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                    javaType="com.tesco.pma.cycle.api.PMTimelinePointStatus"/>
            <result property="number" column="review_number"/>
        </collection>
    </resultMap>

    <resultMap id="reviewStatsResultMap" type="com.tesco.pma.review.domain.ReviewStats">
        <id property="tlPointUuid" column="tl_point_uuid"/>
        <result property="type" column="review_type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMReviewType"/>
        <collection property="statusStats" ofType="com.tesco.pma.review.domain.ReviewStatusCounter">
            <id property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMTimelinePointStatus"/>
            <result property="count" column="cnt"/>
            <result property="lastUpdatedTime" column="last_updated_time"/>
        </collection>
    </resultMap>

    <insert id="intCreate" flushCache="true">
        INSERT INTO pm_review
        (uuid,
         tl_point_uuid,
         type_id,
         number,
         properties,
         last_updated_time,
         status_id)
        VALUES (#{review.uuid},
                #{review.tlPointUuid},
                #{review.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMReviewType},
                #{review.number},
                #{review.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
                #{lastUpdatedTime},
                #{review.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMTimelinePointStatus});
    </insert>

    <select id="read" resultMap="reviewResultMap">
        with change_status_reason as (<include refid="changeStatusReasonQuery"/>)
        <include refid="reviewQuery"/>
        WHERE r.uuid = #{uuid}
    </select>

    <update id="intUpdate" flushCache="true">
        UPDATE pm_review
        SET properties =
        #{review.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
        last_updated_time = #{lastUpdatedTime},
        status_id = #{review.status.id}
        WHERE tl_point_uuid = #{review.tlPointUuid}
        and type_id = #{review.type.id}
        and number = #{review.number}
        <if test="allowedStatuses != null and !allowedStatuses.isEmpty()">
            and status_id in
            <foreach item="allowedStatus" collection="allowedStatuses" separator="," open="(" close=")">
                #{allowedStatus.id}
            </foreach>
        </if>
    </update>

    <delete id="delete">
        DELETE
        FROM pm_review r
        WHERE r.uuid = #{uuid}
        <if test="allowedStatuses != null and !allowedStatuses.isEmpty()">
            and r.status_id in
            <foreach item="allowedStatus" collection="allowedStatuses" separator="," open="(" close=")">
                #{allowedStatus.id}
            </foreach>
        </if>
    </delete>

    <select id="getByParams" resultMap="reviewResultMap">
        with change_status_reason as (<include refid="changeStatusReasonQuery"/>)
        <include refid="reviewQuery"/>
        WHERE 1=1
        <if test="tlPointUuid != null">
            AND r.tl_point_uuid = #{tlPointUuid}
        </if>
        <if test="type != null">
            AND r.type_id = #{type.id}
        </if>
        <if test="status != null">
            AND r.status_id = #{status.id}
        </if>
        <if test="number != null">
            AND r.number = #{number}
        </if>
        order by r.tl_point_uuid, r.type_id, r.number
    </select>

    <select id="getReviewsByColleague" resultMap="reviewResultMap">
        with change_status_reason as (<include refid="changeStatusReasonQuery"/>)
        select r.*,
        csr.change_reason
        from pm_colleague_cycle cc
        inner join pm_timeline_point tlp
        on (cc.uuid = tlp.colleague_cycle_uuid)
        inner join pm_review r
        on (tlp.uuid = r.tl_point_uuid)
        left join change_status_reason csr
        on (r.uuid = csr.review_uuid
        and r.status_id = csr.new_status_id
        and csr.rn = 1)
        where cc.colleague_uuid = #{colleagueUuid}
        and cc.cycle_uuid = #{cycleUuid}
        order by r.type_id, r.number
    </select>

    <select id="getTeamReviews" resultMap="colleagueReviewsResultMap">
        with recursive r_colleague as (
            select c.*, 1 as level
            from colleague c
            where c.manager_uuid = #{managerUuid}
            union all
            select c.*, rc.level + 1 as level
            from r_colleague rc
                     inner join colleague c
                                on (c.manager_uuid = rc.uuid)
            where level &lt; #{depth}
        )
        select distinct c.uuid,
                        c.first_name,
                        c.last_name,
                        j.name          as job_name,
                        d.business_type as business_type,
                        r.uuid          as review_uuid,
                        r.type_id       as review_type_id,
                        r.status_id     as review_status_id,
                        r.number        as review_number
        from r_colleague rc
                 inner join colleague c
                            on (c.uuid = rc.uuid)
                 inner join job j
                            on (j.id = c.job_id)
                 inner join department d
                            on (d.id = c.department_id)
                 left join pm_colleague_cycle cc
                           on (c.uuid = cc.colleague_uuid
                               and cc.status_id = 1)
                 left join pm_timeline_point tlp
                           on (cc.uuid = tlp.colleague_cycle_uuid)
                 left join pm_review r
                           on (tlp.uuid = r.tl_point_uuid)
        order by c.last_name, c.first_name, r.type_id, r.status_id, r.uuid
    </select>

    <update id="intUpdateStatusByParams" flushCache="true">
        update pm_review r
        SET status_id=#{newStatus.id},
        last_updated_time=#{lastUpdatedTime}
        WHERE 1=1
        <if test="tlPointUuid != null">
            AND r.tl_point_uuid = #{tlPointUuid}
        </if>
        <if test="type != null">
            AND r.type_id = #{type.id}
        </if>
        <if test="number != null">
            AND r.number = #{number}
        </if>
        <if test="prevStatuses != null and !prevStatuses.isEmpty()">
            and r.status_id in
            <foreach item="prevStatus" collection="prevStatuses" separator="," open="(" close=")">
                #{prevStatus.id}
            </foreach>
        </if>
    </update>

    <delete id="deleteByParams">
        DELETE
        FROM pm_review r
        WHERE 1=1
        <if test="tlPointUuid != null">
            AND r.tl_point_uuid = #{tlPointUuid}
        </if>
        <if test="type != null">
            AND r.type_id = #{type.id}
        </if>
        <if test="status != null">
            AND r.status_id = #{status.id}
        </if>
        <if test="number != null">
            AND r.number = #{number}
        </if>
        <if test="allowedStatuses != null and !allowedStatuses.isEmpty()">
            and r.status_id in
            <foreach item="allowedStatus" collection="allowedStatuses" separator="," open="(" close=")">
                #{allowedStatus.id}
            </foreach>
        </if>
    </delete>

    <update id="renumerateReviews" flushCache="true">
        update pm_review
        set number = number - 1
        WHERE tl_point_uuid = #{tlPointUuid}
          and type_id = #{type.id}
          and number >= #{startNumber}
    </update>

    <select id="getReviewStats" resultMap="reviewStatsResultMap">
        select r.tl_point_uuid,
               r.type_id                as review_type_id,
               r.status_id,
               count(*)                 as cnt,
               max(r.last_updated_time) as last_updated_time
        from pm_review r
        where r.tl_point_uuid = #{tlPointUuid}
        group by r.tl_point_uuid,
                 r.type_id,
                 r.status_id
    </select>

    <sql id="changeStatusReasonQuery">
        select rcsh.review_uuid,
               rcsh.new_status_id,
               rcsh.updated_time,
               rcsh.change_reason,
               row_number() over (partition by rcsh.review_uuid order by rcsh.updated_time desc) rn
        from pm_review_change_status_hi rcsh
    </sql>

    <sql id="reviewQuery">
        SELECT r.uuid,
               r.tl_point_uuid,
               r.type_id,
               r.number,
               r.properties,
               r.status_id,
               csr.change_reason
        FROM pm_review r
                 left join change_status_reason csr
                           on (r.uuid = csr.review_uuid
                               and r.status_id = csr.new_status_id
                               and csr.rn = 1)
    </sql>

</mapper>