<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.organization.dao.OrganizationDAO">

    <resultMap id="businessUnitStructure" type="com.tesco.pma.organization.api.BusinessUnit">
        <id column="uuid" property="uuid"/>
        <result column="name" property="name"/>
        <result column="type_id" property="type" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.organization.api.BusinessUnitType"/>
        <result column="version" property="version"/>
        <result column="parent_uuid" property="parentUuid"/>
    </resultMap>


    <select id="findRootBusinessUnit" resultMap="businessUnitStructure">
        with recursive orgs as (
            select bu.uuid, bu.name, bu.type_id, bu.version, bu.parent_uuid, 0 as depth
            from business_unit bu
            where bu.uuid = #{uuid}
            union all
            select bu.uuid, bu.name, bu.type_id, bu.version, bu.parent_uuid, depth + 1 as depth
            from orgs
                     join business_unit bu on bu.uuid = orgs.parent_uuid
        )
        select uuid, name, type_id, version, null as parent_uuid
        from orgs
        where depth = (select max(depth) from orgs)
    </select>

    <select id="findBusinessUnitParentStructure" resultMap="businessUnitStructure">
        WITH RECURSIVE orgs AS (
            SELECT bu.uuid, name, bu.type_id, bu.version, bu.parent_uuid, 0 as depth
            FROM business_unit bu
            WHERE bu.uuid = #{uuid}
            UNION ALL
            SELECT bu.uuid, bu.name, bu.type_id, bu.version, bu.parent_uuid, depth + 1 as depth
            FROM orgs
                     JOIN business_unit bu ON bu.uuid = orgs.parent_uuid
        )
        SELECT uuid, name, type_id, version, parent_uuid
        FROM orgs
        ORDER BY depth DESC;
    </select>

    <select id="findBusinessUnitChildStructure" resultMap="businessUnitStructure">
        WITH RECURSIVE orgs AS (
            SELECT bu.uuid, name, bu.type_id, bu.version, bu.parent_uuid, 0 as depth
            FROM business_unit bu
            WHERE bu.uuid = #{uuid}
            UNION ALL
            SELECT bu.uuid, bu.name, bu.type_id, bu.version, bu.parent_uuid, depth + 1 as depth
            FROM orgs
                     JOIN business_unit bu ON bu.parent_uuid = orgs.uuid
        )
        SELECT uuid, name, type_id, version, parent_uuid
        FROM orgs
        ORDER BY depth ASC;
    </select>

    <select id="findPublishedBusinessUnitsByKey" resultMap="businessUnitStructure">
        SELECT bu.uuid, bu.name, bu.type_id, bu.version, bu.parent_uuid
        FROM working_business_unit wbu
                 JOIN business_unit bu ON wbu.unit_uuid = bu.uuid
        WHERE wbu.composite_key like #{key}
    </select>

    <insert id="createBusinessUnit" flushCache="true">
        INSERT INTO business_unit(uuid, name, type_id, version, parent_uuid)
        VALUES (#{bu.uuid}, #{bu.name},
                #{bu.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.organization.api.BusinessUnitType},
                #{bu.version}, #{bu.parentUuid})
    </insert>

    <insert id="publishBusinessUnit" flushCache="true">
        INSERT INTO working_business_unit(name, type_id, version, unit_uuid, composite_key)
        VALUES (#{wbu.name},
                #{wbu.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.organization.api.BusinessUnitType},
                #{wbu.version}, #{wbu.unitUuid}, #{wbu.compositeKey})
    </insert>

    <delete id="unpublishBusinessUnits" flushCache="true">
        DELETE
        FROM working_business_unit
        WHERE composite_key like #{key};
    </delete>
</mapper>