<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.cycle.dao.PMCycleDAO">
    <resultMap id="cycleResultMap" type="com.tesco.pma.cycle.api.PMCycle">
        <id property="uuid" column="uuid"/>
        <result property="entryConfigKey" column="entry_config_key"/>
        <result property="templateUUID" column="template_uuid"/>
        <result property="name" column="name"/>
        <result property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMCycleStatus"/>
        <result property="type" column="type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMCycleType"/>
        <result property="startTime" column="start_time"/>
        <result property="endTime" column="end_time"/>
        <result property="properties" column="properties"
                typeHandler="com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler"
                javaType="com.tesco.pma.api.MapJson"/>
        <result property="jsonMetadata" column="metadata"/>
        <result property="metadata" column="metadata"
                typeHandler="com.tesco.pma.cycle.dao.utils.PMCycleJsonbTypeHandler"
                javaType="com.tesco.pma.cycle.api.model.PMCycleMetadata"/>
        <association property="createdBy" column="{uuid=created_by}" select="getColleagueByUuid"/>
    </resultMap>

    <resultMap id="colleagueMap" type="com.tesco.pma.colleague.api.ColleagueSimple">
        <result property="uuid" column="uuid"/>
        <result property="firstName" column="first_name"/>
        <result property="middleName" column="middle_name"/>
        <result property="lastName" column="last_name"/>
    </resultMap>

    <sql id="addStatusIdCondition">
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND STATUS_ID <if test="!statusFilter.isInclude()">NOT</if> IN
            <foreach collection="statusFilter.getItems()" item="s" index="i" open="(" separator="," close=")">
                #{s.id}
            </foreach>
        </if>
    </sql>

    <sql id="getFilterField">
        <choose>
            <when test="filter.property == 'uuid'">
                uuid
            </when>
            <when test="filter.property == 'entry-config-key'">
                entry_config_key
            </when>
            <when test="filter.property == 'template-uuid'">
                template_uuid
            </when>
            <when test="filter.property == 'name'">
                name
            </when>
            <when test="filter.property == 'status'">
                status_id
            </when>
            <when test="filter.property == 'type'">
                type_id
            </when>
            <when test="filter.property == 'created-by'">
                created_by
            </when>
            <when test="filter.property == 'start-time'">
                start_time
            </when>
            <when test="filter.property == 'end-time'">
                end_time
            </when>
            <otherwise>
                creation_time
            </otherwise>
        </choose>
    </sql>

    <sql id="prepareValues">
        <foreach item="value" collection="filter.value" separator="," open="(" close=")">
            <choose>
                <when test="filter.property == 'uuid' or filter.property == 'template-uuid' or filter.property == 'created-by'">
                    #{value}::uuid
                </when>
                <otherwise>
                    #{value}
                </otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="getExpression">
        <choose>
            <when test="filter.operand.name == 'EQUALS' and filter.property != 'start-time' and filter.property != 'end-time'">
                <include refid="getFilterField"/>
                = '${filter.value}'
            </when>

            <when test="filter.operand.name == 'NOT_EQUALS' and filter.property != 'start-time' and filter.property != 'end-time'">
                <include refid="getFilterField"/>
                != '${filter.value}'
            </when>

            <when test="filter.operand.name == 'IN' and filter.property != 'start-time' and filter.property != 'end-time'">
                <include refid="getFilterField"/>
                IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NOT_IN' and filter.property != 'start-time' and filter.property != 'end-time'">
                <include refid="getFilterField"/>
                NOT IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NULL'">
                <if test="filter.value == 'true'">
                    <include refid="getFilterField"/>
                    IS NULL
                </if>
                <if test="filter.value == 'false'">
                    <include refid="getFilterField"/>
                    IS NOT NULL
                </if>
            </when>
            <when test="filter.operand.name == 'LESS_THAN' and (filter.property == 'start-time' or filter.property == 'end-time')">
                <include refid="getFilterField"/> &lt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'LESS_THAN_EQUALS' and (filter.property == 'start-time' or filter.property == 'end-time')">
                <include refid="getFilterField"/> &lt;= '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN' and (filter.property == 'start-time' or filter.property == 'end-time')">
                <include refid="getFilterField"/> &gt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN_EQUALS' and (filter.property == 'start-time' or filter.property == 'end-time')">
                <include refid="getFilterField"/> &gt;= '${filter.value}'
            </when>
        </choose>
    </sql>

    <insert id="intCreate" flushCache="true" parameterType="com.tesco.pma.cycle.api.PMCycle">
        INSERT INTO pm_cycle
        (uuid,
         entry_config_key,
         template_uuid,
         name,
         type_id,
         status_id,
         created_by,
         creation_time,
         start_time,
         end_time,
         properties,
         metadata)
        VALUES (#{cycle.uuid},
                #{cycle.entryConfigKey},
                #{cycle.templateUUID},
                #{cycle.name},
                #{cycle.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMCycleType},
                #{cycle.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMCycleStatus},
                #{cycle.createdBy.uuid},
                #{now},
                #{cycle.startTime},
                #{cycle.endTime},
                #{cycle.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
                #{cycle.metadata, jdbcType=OTHER, typeHandler=com.tesco.pma.cycle.dao.utils.PMCycleJsonbTypeHandler})
    </insert>

    <update id="update">
        UPDATE pm_cycle
        SET name = #{cycle.name},
        type_id = #{cycle.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMCycleType},
        status_id = #{cycle.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMCycleStatus},
        start_time = #{cycle.startTime},
        end_time = #{cycle.endTime},
        properties = #{cycle.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
        metadata = #{cycle.metadata, jdbcType=OTHER, typeHandler=com.tesco.pma.cycle.dao.utils.PMCycleJsonbTypeHandler}
        WHERE pm_cycle.uuid = #{cycle.uuid}
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND pm_cycle.status_id <if test="!statusFilter.isInclude()">NOT</if> IN
            <foreach collection="statusFilter.getItems()" item="s" index="i" open="(" separator="," close=")">
                #{s.id}
            </foreach>
        </if>
    </update>

    <select id="read" resultMap="cycleResultMap">
        SELECT *
        FROM pm_cycle
        WHERE uuid = #{uuid}
        <include refid="addStatusIdCondition"/>
    </select>

    <update id="updateStatus">
        UPDATE pm_cycle
        SET status_id=#{status.id}
        WHERE uuid = #{uuid}
        <include refid="addStatusIdCondition"/>
    </update>

    <select id="getAll" resultMap="cycleResultMap">
        SELECT uuid,
        entry_config_key,
        template_uuid,
        name,
        type_id,
        status_id,
        created_by,
        start_time,
        end_time,
        properties
        <if test="includeMetadata">
            ,metadata
        </if>
        FROM pm_cycle
        WHERE 1 = 1
        <if test="!requestQuery.filters.isEmpty()">
            <foreach collection="requestQuery.filters" item="filter" index="index" open=" AND " separator=" AND ">
                <include refid="getExpression"/>
            </foreach>
        </if>
    </select>

    <select id="getByColleague" resultMap="cycleResultMap">
        select aa.* from (select
        pmc.uuid,
        pmc.entry_config_key,
        pmc.template_uuid,
        pmc.name,
        pmc.type_id,
        pcc.status_id,
        pmc.created_by,
        pmc.creation_time,
        pcc.start_time,
        pcc.end_time,
        pcc.properties,
        pmc.metadata
        from pm_cycle pmc
        join pm_colleague_cycle pcc on pmc.uuid = pcc.cycle_uuid
        where pcc.colleague_uuid = #{colleagueUuid}) aa
        where 1 = 1
        <include refid="addStatusIdCondition"/>
    </select>

    <insert id="updateMetadata" parameterType="com.tesco.pma.cycle.api.model.PMCycleMetadata">
        update pm_cycle
        set metadata = #{metadata}::jsonb
        WHERE uuid = #{uuid}
    </insert>

    <select id="getColleagueByUuid" resultMap="colleagueMap">
        select uuid,
               first_name,
               middle_name,
               last_name
        from colleague
        where uuid = #{uuid}
    </select>
</mapper>