<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.cycle.dao.PMCycleDAO">
    <resultMap id="cycleResultMap" type="com.tesco.pma.cycle.api.PMCycle">
        <id property="uuid" column="uuid"/>
        <result property="entryConfigKey" column="entry_config_key"/>
        <result property="templateUUID" column="template_uuid"/>
        <result property="name" column="name"/>
        <result property="createdBy" column="created_by"/>
        <result property="status" column="status_id"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMCycleStatus"/>
        <result property="type" column="type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.cycle.api.PMCycleType"/>
        <result property="startTime" column="start_time"/>
        <result property="endTime" column="end_time"/>
        <result property="properties" column="properties"
                typeHandler="com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler"
                javaType="com.tesco.pma.api.MapJson"/>
        <result property="jsonMetadata" column="metadata"/>
    </resultMap>

    <resultMap id="cycleTimelineMap" type="com.tesco.pma.cycle.api.PMCycleTimelinePoint">
        <result property="cycleUuid" column="cycle"/>
        <result property="code" column="code"/>
        <result property="description" column="description"/>
        <result property="type" column="type_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.api.ReviewType"/>
        <result property="startDate" column="start_time"/>
    </resultMap>

    <resultMap id="reviewCountMap" type="com.tesco.pma.cycle.api.ReviewCounter">
        <result property="count" column="cnt"/>
        <result property="status" column="status_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.api.ReviewStatus"/>
    </resultMap>

    <sql id="addStatusIdCondition">
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND STATUS_ID <if test="!statusFilter.isInclude()">NOT</if> IN
            <foreach collection="statusFilter.getItems()" item="s" index="i" open="(" separator="," close=")">
                #{s.id}
            </foreach>
        </if>
    </sql>

    <insert id="create" flushCache="true" parameterType="com.tesco.pma.cycle.api.PMCycle">
        INSERT INTO pm_cycle
        (uuid,
         entry_config_key,
         template_uuid,
         name,
         type_id,
         status_id,
         created_by,
         creation_time,
         start_time,
         end_time,
         properties,
         metadata
        )
        VALUES (#{cycle.uuid},
                #{cycle.entryConfigKey},
                #{cycle.templateUUID},
                #{cycle.name},
                #{cycle.type, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMCycleType},
                #{cycle.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.cycle.api.PMCycleStatus},
                #{cycle.createdBy},
                #{now},
                #{cycle.startTime},
                #{cycle.endTime},
                #{cycle.properties, jdbcType=OTHER, typeHandler=com.tesco.pma.dao.utils.jsonb.MapJsonbTypeHandler},
                #{cycle.jsonMetadata}::jsonb
                );
    </insert>

    <select id="read" resultMap="cycleResultMap">
        SELECT *
        FROM pm_cycle
        WHERE uuid = #{uuid}
    </select>

    <update id="updateStatus">
        UPDATE pm_cycle
        SET status_id=#{status.id}
        WHERE uuid = #{uuid}
        <include refid="addStatusIdCondition"/>
    </update>

    <select id="getAll" resultMap="cycleResultMap">
        SELECT uuid,
            entry_config_key,
            template_uuid,
            name,
            type_id,
            status_id,
            created_by,
            start_time,
            end_time,
            properties
        <if test="includeMetadata">
            ,metadata
        </if>
        FROM pm_cycle
    </select>

    <select id="getByColleague" resultMap="cycleResultMap">
        select aa.* from (select
            pmc.uuid,
            pmc.entry_config_key,
            pmc.template_uuid,
            pmc.name,
            pmc.type_id,
            pcc.status_id,
            pmc.created_by,
            pmc.creation_time,
            pcc.start_time,
            pcc.end_time,
            pcc.properties,
            pmc.metadata
            from pm_cycle pmc
            join pm_colleague_cycle pcc on pmc.uuid = pcc.cycle_uuid
            where pcc.colleague_uuid = #{colleagueUuid}) aa
        where 1 = 1
        <include refid="addStatusIdCondition"/>
    </select>

    <insert id="updateMetadata" parameterType="com.tesco.pma.cycle.api.model.PMCycleMetadata">
        update pm_cycle
        set metadata = #{metadata}::jsonb
        WHERE uuid = #{uuid}
    </insert>

    <select id="readTimeline" resultMap="cycleTimelineMap">
        select yyy.code as code,
        yyy.description as description,
        rt.id as type_id,
        yyy.cycle_id as cycle,
        yyy.start_time
        from
        (select json_extract_path_text(yy.xx, 'id') as rw_uuid,
        json_extract_path_text(yy.xx, 'code') as code,
        json_extract_path_text(yy.xx, 'description') as description,
        json_extract_path_text(yy.xx, 'reviewType', 'code') as rw_type_code,
        json_extract_path_text(yy.xx, 'properties', 'pm_review_start_time') as start_time,
        yy.cycle_id as cycle_id,
        row_number() over () as rn
        from (select json_array_elements((metadata->'cycle'->'reviews')::json) as xx,
        uuid as cycle_id
        from pm_cycle
        WHERE uuid = #{uuid}
        )yy) yyy
        inner join review_type rt on LOWER(rt.code) = LOWER(yyy.rw_type_code)
        order by yyy.start_time
    </select>

    <select id="getReviewsCountByStatus" resultMap="reviewCountMap">
        select count(*) as cnt,
               status_id
        from review rw
                 join review_type rt on rw.type_id = rt.id and LOWER(rt.code)=LOWER(#{type})
        where rw.performance_cycle_uuid=#{pmc_uuid}
          and rw.colleague_uuid=#{colleague_uuid}
        group by status_id
        order by cnt DESC
    </select>
</mapper>