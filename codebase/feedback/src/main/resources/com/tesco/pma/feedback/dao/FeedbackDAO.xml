<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.feedback.dao.FeedbackDAO">

    <resultMap id="feedbackMap" type="com.tesco.pma.feedback.api.Feedback">
        <id column="uuid" property="uuid"/>
        <result column="colleague_uuid" property="colleagueUuid"/>
        <result column="target_colleague_uuid" property="targetColleagueUuid"/>
        <result column="target_type_id" property="targetType"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.feedback.api.FeedbackTargetType"/>
        <result column="target_id" property="targetId"/>
        <result column="read" property="read"/>
        <result column="status_id" property="status"
                typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler"
                javaType="com.tesco.pma.feedback.api.FeedbackStatus"/>
        <result column="created_time" property="createdTime"/>
        <result column="updated_time" property="updatedTime"/>
        <association property="colleagueProfile">
            <association property="colleague">
                <id column="c_uuid" property="colleagueUUID"/>
                <association property="profile" autoMapping="true" columnPrefix="c_"/>
                <collection property="workRelationships" ofType="com.tesco.pma.colleague.api.workrelationships.WorkRelationship">
                    <association property="department">
                        <result column="c_department" property="name"/>
                    </association>
                    <association property="job">
                        <result column="c_job" property="name"/>
                    </association>
                </collection>
            </association>
        </association>
        <association property="targetColleagueProfile">
            <association property="colleague">
                <id column="tc_uuid" property="colleagueUUID"/>
                <association property="profile" autoMapping="true" columnPrefix="tc_"/>
                <collection property="workRelationships" ofType="com.tesco.pma.colleague.api.workrelationships.WorkRelationship">
                    <association property="department">
                        <result column="tc_department" property="name"/>
                    </association>
                    <association property="job">
                        <result column="tc_job" property="name"/>
                    </association>
                </collection>
            </association>
        </association>
        <collection property="feedbackItems" autoMapping="true" columnPrefix="fi_" ofType="com.tesco.pma.feedback.api.FeedbackItem"/>
    </resultMap>

    <!--todo check exclude null case and replace with
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND <if test="!statusFilter.isInclude()">NOT</if> (COALESCE(STATUS_ID, -999) = ANY(ARRAY
            <foreach collection="statusFilter.getItems()" item="s" index="i" open="[" separator="," close="]">
                #{s.id}
            </foreach>
            ))
        </if>
     -->
    <sql id="addStatusIdCondition">
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND STATUS_ID <if test="!statusFilter.isInclude()">NOT</if> IN
            <foreach collection="statusFilter.getItems()" item="s" index="i" open="(" separator="," close=")">
                #{s.id}
            </foreach>
        </if>
    </sql>

    <sql id="addFeedbackColleagueCondition">
        AND (f.colleague_uuid = #{colleagueUuid} OR f.target_colleague_uuid = #{colleagueUuid})
    </sql>

    <sql id="getSortField">
        <choose>
            <when test="sort.field == 'colleague-first-name'">
                c.first_name
            </when>
            <when test="sort.field == 'colleague-middle-name'">
                c.middle_name
            </when>
            <when test="sort.field == 'colleague-last-name'">
                c.last_name
            </when>
            <when test="sort.field == 'target-colleague-first-name'">
                tc.first_name
            </when>
            <when test="sort.field == 'target-colleague-middle-name'">
                tc.middle_name
            </when>
            <when test="sort.field == 'target-colleague-last-name'">
                tc.last_name
            </when>
            <when test="sort.field == 'target-type'">
                f.target_type_id
            </when>
            <when test="sort.field == 'target-id'">
                f.target_id
            </when>
            <when test="sort.field == 'read'">
                f.read
            </when>
            <when test="sort.field == 'status'">
                f.status_id
            </when>
            <when test="sort.field == 'created-time'">
                f.created_time
            </when>
            <when test="sort.field == 'updated-time'">
                f.updated_time
            </when>
            <otherwise>
                f.updated_time
            </otherwise>
        </choose>
    </sql>

    <sql id="getFilterField">
        <choose>
            <when test="filter.property == 'colleague-first-name'">
                c.first_name
            </when>
            <when test="filter.property == 'colleague-middle-name'">
                c.middle_name
            </when>
            <when test="filter.property == 'colleague-last-name'">
                c.last_name
            </when>
            <when test="filter.property == 'target-colleague-first-name'">
                tc.first_name
            </when>
            <when test="filter.property == 'target-colleague-middle-name'">
                tc.middle_name
            </when>
            <when test="filter.property == 'target-colleague-last-name'">
                tc.last_name
            </when>
            <when test="filter.property == 'uuid'">
                f.uuid
            </when>
            <when test="filter.property == 'colleague-uuid'">
                f.colleague_uuid
            </when>
            <when test="filter.property == 'target-colleague-uuid'">
                f.target_colleague_uuid
            </when>
            <when test="filter.property == 'target-type'">
                f.target_type_id
            </when>
            <when test="filter.property == 'target-id'">
                f.target_id
            </when>
            <when test="filter.property == 'read'">
                f.read
            </when>
            <when test="filter.property == 'status'">
                f.status_id
            </when>
            <when test="filter.property == 'created-time'">
                f.created_time
            </when>
            <when test="filter.property == 'updated-time'">
                f.updated_time
            </when>
            <otherwise>
                f.updated_time
            </otherwise>
        </choose>
    </sql>

    <sql id="prepareValues">
        <foreach item="value" collection="filter.value" separator="," open="(" close=")">
            <choose>
                <when test="filter.property == 'uuid'">
                    #{value}::uuid
                </when>
                <when test="filter.property == 'status' or filter.property == 'target-type'">
                    #{value}::INTEGER
                </when>
                <otherwise>
                    #{value}
                </otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="getExpression">
        <choose>
            <when test="filter.operand.name == 'EQUALS' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                = '${filter.value}'
            </when>

            <when test="filter.operand.name == 'NOT_EQUALS' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                != '${filter.value}'
            </when>
            <when test="filter.operand.name == 'CONTAINS' and filter.property != 'created-time' and filter.property != 'updated-time'
                    and filter.property != 'uuid' and filter.property != 'colleague-uuid' and filter.property != 'target-colleague-uuid'
                    and filter.property != 'target-type' and filter.property != 'target-id' and filter.property != 'read'
                    and filter.property != 'status'">
                UPPER(<include refid="getFilterField"/>) LIKE UPPER('%${filter.value}%')
            </when>
            <when test="filter.operand.name == 'NOT_CONTAINS' and filter.property != 'created-time' and filter.property != 'updated-time'
                    and filter.property != 'uuid' and filter.property != 'colleague-uuid' and filter.property != 'target-colleague-uuid'
                    and filter.property != 'target-type' and filter.property != 'target-id' and filter.property != 'read'
                    and filter.property != 'status'">
                UPPER(<include refid="getFilterField"/>) NOT LIKE UPPER('%${filter.value}%')
            </when>
            <when test="filter.operand.name == 'IN' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NOT_IN' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                NOT IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NULL'">
                <if test="filter.value == 'true'">
                    <include refid="getFilterField"/>
                    IS NULL
                </if>
                <if test="filter.value == 'false'">
                    <include refid="getFilterField"/>
                    IS NOT NULL
                </if>
            </when>
            <when test="filter.operand.name == 'LESS_THAN' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &lt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'LESS_THAN_EQUALS' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &lt;= '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &gt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN_EQUALS' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &gt;= '${filter.value}'
            </when>
        </choose>
    </sql>

    <select id="getByUuid" flushCache="true" resultMap="feedbackMap">
        SELECT f.uuid,
               f.colleague_uuid,
               f.target_colleague_uuid,
               f.target_type_id,
               f.target_id,
               f.read,
               f.status_id,
               f.created_time,
               f.updated_time,
               fi.uuid          as fi_uuid,
               fi.code          as fi_code,
               fi.content       as fi_content,
               fi.feedback_uuid as fi_feedbackUuid,
               c.uuid           as c_uuid,
               c.first_name     as c_firstName,
               c.middle_name    as c_middleName,
               c.last_name      as c_lastName,
               cj.name          as c_job,
               cd.name          as c_department,
               tc.uuid          as tc_uuid,
               tc.first_name    as tc_firstName,
               tc.middle_name   as tc_middleName,
               tc.last_name     as tc_lastName,
               tcj.name         as tc_job,
               tcd.name         as tc_department
        FROM feedback f
                 LEFT JOIN feedback_item fi ON f.uuid = fi.feedback_uuid
                 JOIN colleague c ON f.colleague_uuid = c.uuid
                 LEFT JOIN job cj on c.job_id = cj.id
                 LEFT JOIN department cd on c.department_id = cd.id
                 JOIN colleague tc ON f.target_colleague_uuid = tc.uuid
                 LEFT JOIN job tcj on tc.job_id = tcj.id
                 LEFT JOIN department tcd on tc.department_id = tcd.id
        WHERE f.uuid = #{uuid}
        <include refid="addFeedbackColleagueCondition"/>
    </select>

    <sql id="requestQuerySort">
        <if test="requestQuery.sort.isEmpty()">
            ORDER BY f.created_time DESC
        </if>
        <if test="!requestQuery.sort.isEmpty()">
            ORDER BY
            <foreach collection="requestQuery.sort" item="sort" index="index" separator=",">
                <include refid="getSortField"/>
                ${sort.order.name}
            </foreach>
        </if>
    </sql>

    <select id="findAll" flushCache="true" resultMap="feedbackMap">
        SELECT
        f.uuid,
        f.colleague_uuid,
        f.target_colleague_uuid,
        f.target_type_id,
        f.target_id,
        f.read,
        f.status_id,
        f.created_time,
        f.updated_time,
        fi.uuid as fi_uuid,
        fi.code as fi_code,
        fi.content as fi_content,
        fi.feedback_uuid as fi_feedbackUuid,
        c_uuid,
        c_firstName,
        c_middleName,
        c_lastName,
        c_job,
        c_department,
        tc_uuid,
        tc_firstName,
        tc_middleName,
        tc_lastName,
        tc_job,
        tc_department
        FROM (SELECT
        f.uuid,
        f.colleague_uuid,
        f.target_colleague_uuid,
        f.target_type_id,
        f.target_id,
        f.read,
        f.status_id,
        f.created_time,
        f.updated_time,
        c.uuid as c_uuid,
        c.first_name as c_firstName,
        c.middle_name as c_middleName,
        c.last_name as c_lastName,
        cj.name as c_job,
        cd.name as c_department,
        tc.uuid as tc_uuid,
        tc.first_name as tc_firstName,
        tc.middle_name as tc_middleName,
        tc.last_name as tc_lastName,
        tcj.name as tc_job,
        tcd.name as tc_department
        FROM feedback f
        JOIN colleague c ON f.colleague_uuid = c.uuid
        LEFT JOIN job cj on c.job_id = cj.id
        LEFT JOIN department cd on c.department_id = cd.id
        JOIN colleague tc ON f.target_colleague_uuid = tc.uuid
        LEFT JOIN job tcj on tc.job_id = tcj.id
        LEFT JOIN department tcd on tc.department_id = tcd.id
        WHERE 1 = 1
        <include refid="addFeedbackColleagueCondition"/>
        <if test="!requestQuery.filters.isEmpty()">
            <foreach collection="requestQuery.filters" item="filter" index="index" open=" AND " separator=" AND ">
                <include refid="getExpression"/>
            </foreach>
        </if>
        <if test="requestQuery.search != null and requestQuery.search != ''">
            AND (UPPER(tc.first_name) LIKE '%'||UPPER(#{requestQuery.search})||'%' OR
            UPPER(tc.middle_name) LIKE '%'||UPPER(#{requestQuery.search})||'%' OR
            UPPER(tc.last_name) LIKE '%'||UPPER(#{requestQuery.search})||'%')
        </if>
        <include refid="requestQuerySort"/>
        LIMIT #{requestQuery.limit}
        <if test="requestQuery.offset != null">
            OFFSET #{requestQuery.offset}
        </if>) f
        LEFT JOIN feedback_item fi ON f.uuid = fi.feedback_uuid
        <include refid="requestQuerySort"/>
    </select>

    <select id="getGivenFeedbackCount" flushCache="true" resultType="int">
        SELECT count(f.uuid)
        FROM feedback f
        WHERE f.read = false
          AND f.target_colleague_uuid = #{colleagueUuid}
          <include refid="addStatusIdCondition"/>
    </select>

    <select id="getRequestedFeedbackCount" flushCache="true" resultType="int">
        SELECT count(f.uuid)
        FROM feedback f
        WHERE f.colleague_uuid = #{colleagueUuid}
          <include refid="addStatusIdCondition"/>
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="uuid" keyColumn="uuid" flushCache="true">
        INSERT INTO feedback (uuid,
                              colleague_uuid,
                              target_colleague_uuid,
                              target_type_id,
                              target_id,
                              read,
                              status_id,
                              created_time,
                              updated_time)
        VALUES (#{feedback.uuid},
                #{feedback.colleagueUuid},
                #{feedback.targetColleagueUuid},
                #{feedback.targetType, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.feedback.api.FeedbackTargetType},
                #{feedback.targetId},
                #{feedback.read},
                #{feedback.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.feedback.api.FeedbackStatus},
                #{feedback.createdTime},
                #{feedback.updatedTime})
    </insert>

    <update id="update">
        UPDATE feedback f
        SET colleague_uuid = #{feedback.colleagueUuid},
        target_colleague_uuid = #{feedback.targetColleagueUuid},
        target_type_id =
        #{feedback.targetType, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.feedback.api.FeedbackTargetType},
        target_id = #{feedback.targetId},
        read = #{feedback.read},
        status_id =
        #{feedback.status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, javaType=com.tesco.pma.feedback.api.FeedbackStatus},
        updated_time = #{feedback.updatedTime}
        WHERE f.uuid = #{feedback.uuid}
        <include refid="addStatusIdCondition"/>
    </update>

    <update id="markAsRead">
        UPDATE feedback f
        SET read = true
        WHERE f.uuid = #{uuid}
        <include refid="addFeedbackColleagueCondition"/>
    </update>

    <insert id="insertOrUpdateFeedbackItem" flushCache="true" useGeneratedKeys="true" keyColumn="uuid" keyProperty="uuid">
        INSERT INTO feedback_item (uuid, code, content, feedback_uuid)
        VALUES (#{feedbackItem.uuid}, #{feedbackItem.code}, #{feedbackItem.content}, #{feedbackItem.feedbackUuid})
        ON CONFLICT (uuid)
            DO UPDATE SET code    = #{feedbackItem.code},
                          content = #{feedbackItem.content}
        WHERE feedback_item.uuid = #{feedbackItem.uuid}
    </insert>

</mapper>