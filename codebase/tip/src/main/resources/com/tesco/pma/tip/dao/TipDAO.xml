<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.tip.dao.TipDAO">

    <resultMap id="tipMap" type="com.tesco.pma.tip.api.Tip">
        <id property="uuid" column="uuid"/>
        <result property="version" column="version"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="imageLink" column="image_link"/>
        <result property="published" column="published"/>
        <result property="createdTime" column="created_time"/>
        <result property="updatedTime" column="updated_time"/>
        <association property="targetOrganisation" autoMapping="true" columnPrefix="o_"
                     javaType="com.tesco.pma.organisation.api.ConfigEntry"/>
        <collection property="history" ofType="com.tesco.pma.tip.api.Tip">
            <id property="pkUuid" column="pk_uuid"/>
            <result property="uuid" column="h_uuid"/>
            <result property="version" column="h_version"/>
            <result property="title" column="h_title"/>
            <result property="description" column="h_description"/>
            <result property="imageLink" column="h_imageLink"/>
            <result property="published" column="h_published"/>
            <result property="createdTime" column="h_createdTime"/>
            <result property="updatedTime" column="h_updatedTime"/>
            <association property="targetOrganisation" autoMapping="true" columnPrefix="ho_"
                         javaType="com.tesco.pma.organisation.api.ConfigEntry"/>
        </collection>
    </resultMap>

    <sql id="getSortField">
        <choose>
            <when test="sort.field == 'title'">
                t.title
            </when>
            <when test="sort.field == 'description'">
                t.description
            </when>
            <when test="sort.field == 'published'">
                t.published
            </when>
            <when test="sort.field == 'organization-name'">
                ce.name
            </when>
            <when test="sort.field == 'organization-key'">
                ce.composite_key
            </when>
            <when test="sort.field == 'created-time'">
                t.created_time
            </when>
            <when test="sort.field == 'updated-time'">
                t.updated_time
            </when>
            <otherwise>
                t.created_time
            </otherwise>
        </choose>
    </sql>

    <sql id="getFilterField">
        AND
        <choose>
            <when test="filter.property == 'uuid'">
                t.uuid
            </when>
            <when test="filter.property == 'title'">
                t.title
            </when>
            <when test="filter.property == 'description'">
                t.description
            </when>
            <when test="filter.property == 'published'">
                t.published
            </when>
            <when test="filter.property == 'organization-name'">
                ce.name
            </when>
            <when test="filter.property == 'organization-key'">
                ce.composite_key
            </when>
            <when test="filter.property == 'created-time'">
                t.created_time
            </when>
            <when test="filter.property == 'updated-time'">
                t.updated_time
            </when>
            <otherwise>
                t.created_time
            </otherwise>
        </choose>
    </sql>

    <sql id="prepareValues">
        <foreach item="value" collection="filter.value" separator="," open="(" close=")">
            <choose>
                <when test="filter.property == 'uuid'">
                    #{value}::uuid
                </when>
                <otherwise>
                    #{value}
                </otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="getExpression">
        <choose>
            <when test="filter.operand.name == 'EQUALS' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                = '${filter.value}'
            </when>
            <when test="filter.operand.name == 'NOT_EQUALS' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                != '${filter.value}'
            </when>
            <when test="filter.operand.name == 'CONTAINS' and (filter.property == 'title' or filter.property == 'description' or
                                                               filter.property == 'organization-name' or filter.property == 'organization-key')">
                <include refid="getFilterField"/>
                LIKE '%'||UPPER('${filter.value}')||'%'
            </when>
            <when test="filter.operand.name == 'NOT_CONTAINS' and (filter.property == 'title' or filter.property == 'description' or
                                                               filter.property == 'organization-name' or filter.property == 'organization-key')">
                <include refid="getFilterField"/>
                NOT LIKE '%'||UPPER('${filter.value}')||'%'
            </when>
            <when test="filter.operand.name == 'IN' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NOT_IN' and filter.property != 'created-time' and filter.property != 'updated-time'">
                <include refid="getFilterField"/>
                NOT IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NULL'">
                <if test="filter.value == 'true'">
                    <include refid="getFilterField"/>
                    IS NULL
                </if>
                <if test="filter.value == 'false'">
                    <include refid="getFilterField"/>
                    IS NOT NULL
                </if>
            </when>
            <when test="filter.operand.name == 'LESS_THAN' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &lt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'LESS_THAN_EQUALS' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &lt;= '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &gt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN_EQUALS' and (filter.property == 'created-time' or filter.property == 'updated-time')">
                <include refid="getFilterField"/> &gt;= '${filter.value}'
            </when>
        </choose>
    </sql>

    <sql id="select">
        SELECT t.uuid,
               t.version,
               t.title,
               t.description,
               t.image_link,
               t.published,
               t.created_time,
               t.updated_time,
               ce.uuid           as o_uuid,
               ce.name           as o_name,
               ce.composite_key  as o_compositeKey,
               h.uuid            as h_uuid,
               h.version         as h_version,
               h.title           as h_title,
               h.description     as h_description,
               h.image_link      as h_imageLink,
               h.published       as h_published,
               h.created_time    as h_createdTime,
               h.updated_time    as h_updatedTime,
               hce.uuid          as ho_uuid,
               hce.name          as ho_name,
               hce.composite_key as ho_compositeKey
        FROM tip t
                 LEFT JOIN config_entry ce ON ce.uuid = t.target_organisation_uuid
                 LEFT JOIN tip h ON h.uuid = t.uuid
                 LEFT JOIN config_entry hce ON hce.uuid = h.target_organisation_uuid
        WHERE (t.uuid, t.version) IN
              (SELECT uuid, MAX(version)
               FROM tip
               GROUP BY uuid)
    </sql>

    <select id="findByRequestQuery" flushCache="true" resultMap="tipMap">
        <include refid="select"/>
        <if test="!requestQuery.filters.isEmpty()">
            <foreach collection="requestQuery.filters" item="filter" index="index">
                <include refid="getExpression"/>
            </foreach>
        </if>
        <if test="requestQuery.search != null and requestQuery.search != ''">
            AND ( UPPER(t.title) LIKE '%'||UPPER(#{requestQuery.search})||'%'
            OR UPPER(t.description) LIKE '%'||UPPER(#{requestQuery.search})||'%' )
        </if>
        <if test="requestQuery.sort.isEmpty()">
            ORDER BY t.updated_time DESC
        </if>
        <if test="!requestQuery.sort.isEmpty()">
            ORDER BY
            <foreach collection="requestQuery.sort" item="sort" index="index" separator=",">
                <include refid="getSortField"/>
                ${sort.order.name}
            </foreach>
        </if>
        <if test="requestQuery.limit != null">
            LIMIT #{requestQuery.limit}
        </if>
        <if test="requestQuery.offset != null">
            OFFSET #{requestQuery.offset}
        </if>
    </select>

    <select id="findByUuid" flushCache="true" resultMap="tipMap">
        <include refid="select"/>
        AND t.uuid = #{uuid}
    </select>

    <insert id="create" useGeneratedKeys="true" keyProperty="uuid" keyColumn="uuid" flushCache="true">
        INSERT INTO tip (pk_uuid,
                         uuid,
                         version,
                         title,
                         description,
                         target_organisation_uuid,
                         image_link,
                         published,
                         created_time,
                         updated_time)
        VALUES (#{tip.pkUuid},
                #{tip.uuid},
                #{tip.version},
                #{tip.title},
                #{tip.description},
                #{tip.targetOrganisation.uuid},
                #{tip.imageLink},
                #{tip.published},
                #{tip.createdTime},
                #{tip.updatedTime})
    </insert>

    <delete id="delete">
        DELETE
        FROM tip
        WHERE uuid = #{uuid}
    </delete>

</mapper>