<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.fs.dao.FileDAO">

    <resultMap id="fileResultMap" type="com.tesco.pma.file.api.File">
        <id property="uuid" column="uuid"/>
        <result property="path" column="path"/>
        <result property="version" column="version"/>
        <result property="status" column="status_id" typeHandler="com.tesco.pma.dao.utils.DictionaryItemTypeHandler" javaType="com.tesco.pma.file.api.FileStatus"/>
        <result property="description" column="f_description"/>
        <result property="createdBy" column="created_by"/>
        <result property="createdTime" column="created_time"/>
        <result property="fileName" column="file_name"/>
        <result property="fileDate" column="file_date"/>
        <result property="fileLength" column="file_length"/>
        <result property="fileContent" column="file_content" jdbcType="BINARY"/>
        <association property="type" autoMapping="true" columnPrefix="t_"/>
    </resultMap>

    <sql id="addStatusIdCondition">
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND STATUS_ID <if test="!statusFilter.isInclude()">NOT</if> IN
            <foreach collection="statusFilter.getItems()" item="status" index="i" open="(" separator="," close=")">
                #{status.id}
            </foreach>
        </if>
    </sql>

    <sql id="getSortField">
        <choose>
            <when test="sort.field == 'path'">
                path
            </when>
            <when test="sort.field == 'version'">
                version
            </when>
            <when test="sort.field == 'type'">
                type_id
            </when>
            <when test="sort.field == 'status'">
                status_id
            </when>
            <when test="sort.field == 'description'">
                file.description
            </when>
            <when test="sort.field == 'created-by'">
                created_by
            </when>
            <when test="sort.field == 'created-time'">
                created_time
            </when>
            <when test="sort.field == 'file-name'">
                file_name
            </when>
            <when test="sort.field == 'file-date'">
                file_date
            </when>
            <when test="sort.field == 'file-length'">
                file_length
            </when>
            <otherwise>
                created_time
            </otherwise>
        </choose>
    </sql>

    <sql id="getFilterField">
        AND
        <choose>
            <when test="filter.property == 'uuid'">
                uuid
            </when>
            <when test="filter.property == 'path'">
                path
            </when>
            <when test="filter.property == 'version'">
                version
            </when>
            <when test="filter.property == 'type'">
                type_id
            </when>
            <when test="filter.property == 'status'">
                status_id
            </when>
            <when test="filter.property == 'description'">
                file.description
            </when>
            <when test="filter.property == 'created-by'">
                created_by
            </when>
            <when test="filter.property == 'created-time'">
                created_time
            </when>
            <when test="filter.property == 'file-name'">
                file_name
            </when>
            <when test="filter.property == 'file-date'">
                file_date
            </when>
            <when test="filter.property == 'file-length'">
                file_length
            </when>
            <otherwise>
                created_time
            </otherwise>
        </choose>
    </sql>

    <sql id="prepareValues">
        <foreach item="value" collection="filter.value" separator="," open="(" close=")">
            <choose>
                <when test="filter.property == 'uuid'">
                    #{value}::uuid
                </when>
                <otherwise>
                    #{value}
                </otherwise>
            </choose>
        </foreach>
    </sql>

    <sql id="getExpression">
        <choose>
            <when test="filter.operand.name == 'EQUALS' and filter.property != 'created-time' and filter.property != 'file-date' and filter.property != 'file-content'">
                <include refid="getFilterField"/>
                = '${filter.value}'
            </when>
            <when test="filter.operand.name == 'NOT_EQUALS' and filter.property != 'created-time' and filter.property != 'file-date' and filter.property != 'file-content'">
                <include refid="getFilterField"/>
                != '${filter.value}'
            </when>

            <when test="filter.operand.name == 'CONTAINS' and (filter.property == 'path' or filter.property == 'description' or
                                                               filter.property == 'file-name' or filter.property == 'created-by')">
                <include refid="getFilterField"/>
                LIKE '%'||UPPER('${filter.value}')||'%'
            </when>
            <when test="filter.operand.name == 'NOT_CONTAINS' and (filter.property == 'path' or filter.property == 'description' or
                                                                   filter.property == 'file-name' or filter.property == 'created-by')">
                <include refid="getFilterField"/>
                NOT LIKE '%'||UPPER('${filter.value}')||'%'
            </when>

            <when test="filter.operand.name == 'IN' and filter.property != 'created-time' and filter.property != 'file-date' and filter.property != 'file-content'
                        and filter.property != 'type' and filter.property != 'status'">
                <include refid="getFilterField"/>
                IN
                <include refid="prepareValues"/>
            </when>
            <when test="filter.operand.name == 'NOT_IN' and filter.property != 'created-time' and filter.property != 'file-date' and filter.property != 'file-content'
                        and filter.property != 'type' and filter.property != 'status'">
                <include refid="getFilterField"/>
                NOT IN
                <include refid="prepareValues"/>
            </when>

            <when test="filter.operand.name == 'NULL'">
                <if test="filter.value == 'true'">
                    <include refid="getFilterField"/>
                    IS NULL
                </if>
                <if test="filter.value == 'false'">
                    <include refid="getFilterField"/>
                    IS NOT NULL
                </if>
            </when>

            <when test="filter.operand.name == 'LESS_THAN' and (filter.property == 'created-time' or filter.property == 'file-date'
                        or filter.property == 'file-length' or filter.property == 'version')">
                <include refid="getFilterField"/> &lt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'LESS_THAN_EQUALS' and (filter.property == 'created-time' or filter.property == 'file-date'
                        or filter.property == 'file-length' or filter.property == 'version')">
                <include refid="getFilterField"/> &lt;= '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN' and (filter.property == 'created-time' or filter.property == 'file-date'
                        or filter.property == 'file-length' or filter.property == 'version')">
                <include refid="getFilterField"/> &gt; '${filter.value}'
            </when>
            <when test="filter.operand.name == 'GREATER_THAN_EQUALS' and (filter.property == 'created-time' or filter.property == 'file-date'
                        or filter.property == 'file-length' or filter.property == 'version')">
                <include refid="getFilterField"/> &gt;= '${filter.value}'
            </when>
        </choose>
    </sql>

    <select id="read" resultMap="fileResultMap">
        SELECT uuid, path, version, type_id, status_id, file.description as f_description,
        created_by, created_time, file_name, file_date, file_length,
        ft.id as t_id, ft.code as t_code, ft.description as t_description
        <if test="includeFileContent">
            , file_content
        </if>
        FROM file
        LEFT JOIN file_type ft on file.type_id = ft.id
        WHERE uuid = #{fileUuid}
        <if test="colleagueUuid != null">
          AND created_by = #{colleagueUuid}
        </if>
    </select>

    <select id="findByRequestQuery" resultMap="fileResultMap">
        SELECT uuid, path, version, type_id, status_id, file.description as f_description,
        created_by, created_time, file_name, file_date, file_length,
        ft.id as t_id, ft.code as t_code, ft.description as t_description
        <if test="includeFileContent">
            , file_content
        </if>
        FROM file
        LEFT JOIN file_type ft on file.type_id = ft.id
        WHERE 1 = 1
        <if test="colleagueUuid != null">
            AND created_by = #{colleagueUuid}
        </if>
        <if test="latest">
        AND (path, file_name, version) IN
        (SELECT path, file_name, MAX(version)
        FROM file
        GROUP BY path, file_name)
        <foreach collection="statusFilters" item="statusFilter" index="i" separator=",">
            <include refid="addStatusIdCondition"/>
        </foreach>
        </if>

        <if test="!requestQuery.filters.isEmpty()">
            <foreach collection="requestQuery.filters" item="filter" index="index">
                <include refid="getExpression"/>
            </foreach>
        </if>
        <if test="requestQuery.search != null and requestQuery.search != ''">
            AND ( UPPER(path) LIKE '%'||UPPER(#{requestQuery.search})||'%'
                      OR UPPER(file_name) LIKE '%'||UPPER(#{requestQuery.search})||'%'
                      OR UPPER(file.description) LIKE '%'||UPPER(#{requestQuery.search})||'%'
            )
        </if>

        <if test="requestQuery.sort.isEmpty()">
            ORDER BY created_time DESC
        </if>
        <if test="!requestQuery.sort.isEmpty()">
            ORDER BY
            <foreach collection="requestQuery.sort" item="sort" index="index" separator=",">
                <include refid="getSortField"/>
                ${sort.order.name}
            </foreach>
        </if>

        <if test="requestQuery.limit != null">
        LIMIT #{requestQuery.limit}
        </if>
        <if test="requestQuery.offset != null">
            OFFSET #{requestQuery.offset}
        </if>
    </select>

    <insert id="create" flushCache="true">
        INSERT INTO file (uuid, path, version, type_id, status_id, description,
        created_by, created_time, file_name, file_date, file_length, file_content)
        VALUES (#{uuid},
                #{path},
                (<include refid="getMaxVersion">
                    <property name="path" value="#{path}"/>
                    <property name="fileName" value="#{fileName}"/>
                </include>) + 1,
                #{type.id},
                #{status, typeHandler=com.tesco.pma.dao.utils.DictionaryItemTypeHandler, jdbcType=INTEGER},
                #{description},
                #{createdBy},
                #{createdTime},
                #{fileName},
                #{fileDate},
                #{fileLength},
                #{fileContent, jdbcType=BINARY})
    </insert>

    <sql id="getMaxVersion">
        SELECT COALESCE(MAX(version), 0)
        FROM file
        WHERE path = #{path} AND file_name = #{fileName}
    </sql>

</mapper>