subprojects {
    apply plugin: 'java'

    repositories {
        if ('useRepository' in buildProfiles.split('[,;:]')) {
            maven {
                url repositoryURL
                credentials {
                    username = repositoryUser
                    password = repositoryPassword
                }
            }
        } else {
            mavenLocal()
            mavenCentral()
            maven { url 'https://jitpack.io' }
        }
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
        testImplementation "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    }

    apply from: "$rootDir/gradle/artifacts.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/pmd.gradle"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/sonarqube.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"

    tasks.withType(JavaCompile) {
        // options.compilerArgs += ['-Xlint:-options', '-XepAllDisabledChecksAsWarnings', '-Xep:Var:OFF', '-Werror']
        sourceCompatibility = "${javaCompatibility}"
        targetCompatibility = "${javaCompatibility}"
        options.compilerArgs << '-parameters'
    }

    tasks.withType (Test) {
        maxParallelForks = 2
        testLogging {
            // to show STANDARD_OUT in tests add parameter: -PloggingShowStandardOut
            if (project && project.hasProperty('loggingShowStandardOut')) {
                showStandardStreams = true
                events 'started', 'passed', 'failed'
            } else {
                events 'passed', 'failed'
            }
        }
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco.exec")
            classDumpDir = file("$buildDir/jacoco/jacoco_ClassDump")
        }
    }

    test {
        // to skip test run gradle build with parameter: -PskipTests
        onlyIf { !project.hasProperty('skipTests') }

        useJUnitPlatform()

        description 'Used for running unit tests.'
        exclude '**/**MockTest.class'
        exclude '**/**IntegTest.class'
    }

    task mockTest(type: Test) {
        description 'Used for running mock tests.'
        include '**/**MockTest.class'
    }

    task integTest(type: Test) {
        description 'Used for running integ tests.'
        include '**/**IntegTest.class'
    }

    build.finalizedBy jacocoTestReport, jacocoTestCoverageVerification

    publish.dependsOn(publishToMavenLocal)
}