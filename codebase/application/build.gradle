import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id "io.spring.dependency-management" version "${dependencyManagementVersion}"
    id "com.github.johnrengelman.processes" version "${openApiPluginProccessVersion}"
    id "org.springdoc.openapi-gradle-plugin" version "${openApiGradlePluginVersion}"
}

dependencies {
    implementation project(':api')
    implementation project(':service')
    implementation project(':healthcheck')
    implementation project(':spring')
    implementation project(':event')
    implementation project(':bpm')
    implementation project(':camunda')
    implementation project(':pm')
    implementation project(':organisation')
    implementation project(':profile')
    implementation project(':review')
    implementation project(':cep')
    implementation project(':feedback')
    implementation project(':notes')

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")

    implementation("org.springdoc:springdoc-openapi-core:${openApiCoreVersion}")
    implementation("org.springdoc:springdoc-openapi-ui:${openApiUiVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

build {
    /**
     * Copying all files from 'scr/main/config'
     * to destination 'libs' folder
     */
    doLast {
        copy {
            from 'src/main/config'
            into layout.buildDirectory.dir('libs/config')
            exclude '**/application.properties.example'
            if ('docker' in buildProfiles.split(/[,;:]/)) {
                exclude '**/application.properties'
            }
        }
    }
}

jar {
    enabled(false)
}

springBoot {
    buildInfo {
        properties {
            name = 'PMA application'
            group = rootProjectGroup
            version = rootProjectVersion
        }
    }
}

bootJar {
    enabled(true)

    archiveClassifier = 'boot'
    archiveVersion = rootProjectVersion

    manifest {
        attributes 'Implementation-Title': "${rootProjectName}"
        attributes 'Implementation-Version': archiveVersion
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

sourceSets {
    main {
        resources {
            exclude '**/application.properties.example'
            if ('docker' in buildProfiles.split(/[,;:]/)) {
                exclude '**/application.properties'
            }
        }
    }
    bootRunSet {
        runtimeClasspath += sourceSets.main.runtimeClasspath
        resources {
            srcDir "${buildDir}/resources/main"
            srcDir "src/main/config"
            exclude '**/application.properties.example'
            if ('docker' in buildProfiles.split(/[,;:]/)) {
                exclude '**/application.properties'
            }
        }
    }
}

processResources {
    include '**/banner.txt'
    filter ReplaceTokens, tokens: [
        "camunda.version": String.format("%10s", "(${project.property("camundaVersion")})"),
        "springBoot.version": String.format("%10s", "(${project.property("springBootVersion")})")
    ]
}

bootRun {
    sourceResources sourceSets.bootRunSet

    // setting environment variables
    environment 'SERVICE_HOME', "${buildDir}/bootRun"
    environment 'java.io.tmpdir', "${buildDir}/bootRun/temp"
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
}

openApi {
    apiDocsUrl.set("http://localhost:8083/v1/api-docs")
    outputDir.set(file("$buildDir/docs"))
    outputFileName.set("swagger.json")
    waitTimeInSeconds.set(10)
    //forkProperties.set("-Dspring.profiles.active=special")
}
