<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.organisation.dao.ConfigEntryDAO">

    <resultMap id="configEntryStructure" type="com.tesco.pma.organisation.api.ConfigEntry">
        <id column="uuid" property="uuid"/>
        <result column="name" property="name"/>
        <result column="version" property="version"/>
        <result column="parent_uuid" property="parentUuid"/>
        <result column="composite_key" property="compositeKey"/>
        <association property="type" autoMapping="true" columnPrefix="t_"/>
    </resultMap>

    <resultMap id="colleagueMap" type="com.tesco.pma.colleague.profile.domain.ColleagueEntity">
        <id column="uuid" property="uuid"/>
        <result column="first_name" property="firstName"/>
        <result column="middle_name" property="middleName"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="primary_entity" property="primaryEntity"/>
        <result column="salary_frequency" property="salaryFrequency"/>
        <result column="iam_source" property="iamSource"/>
        <result column="iam_id" property="iamId"/>
        <result column="manager_uuid" property="managerUuid"/>
        <result column="employment_type" property="employmentType"/>
        <result column="hire_date" property="hireDate"/>
        <result column="leaving_date" property="leavingDate"/>
        <result column="is_manager" property="manager"/>
        <result column="location_id" property="locationId"/>
        <result column="legal_entity" property="legalEntity"/>
        <association property="job" autoMapping="true" columnPrefix="j_"/>
        <association property="country" autoMapping="true" columnPrefix="co_"/>
        <association property="workLevel" autoMapping="true" columnPrefix="wl_"/>
        <association property="department">
            <id column="d_uuid" property="uuid"/>
            <result column="d_id" property="id"/>
            <result column="d_name" property="name"/>
            <association property="businessType" autoMapping="true" columnPrefix="bt_"/>
        </association>
    </resultMap>

    <select id="findAllUnpublishedRootEntries" resultMap="configEntryStructure">
        SELECT ce.uuid,
               ce.name,
               ce.type_id,
               ce.version,
               ce.parent_uuid,
               ce.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM config_entry ce
                 JOIN config_entry_type cet ON cet.id = ce.type_id
        WHERE ce.parent_uuid is null
    </select>

    <select id="findAllPublishedRootEntries" resultMap="configEntryStructure">
        SELECT ce.uuid,
               wce.name,
               wce.type_id,
               wce.version,
               ce.parent_uuid,
               wce.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM working_config_entry wce
                 JOIN config_entry ce ON wce.config_entry_uuid = ce.uuid
                 JOIN config_entry_type cet ON cet.id = wce.type_id
        WHERE ce.parent_uuid is null
    </select>

    <select id="findPublishedConfigEntryChildStructure" resultMap="configEntryStructure">
        WITH RECURSIVE orgs AS (
            SELECT ce.uuid, wce.name, wce.type_id, wce.version, ce.parent_uuid, wce.composite_key, 0 as depth
            FROM config_entry ce
                     JOIN working_config_entry wce ON wce.config_entry_uuid = ce.uuid
            WHERE ce.uuid = #{uuid}
            UNION ALL
            SELECT ce.uuid, wce.name, wce.type_id, wce.version, ce.parent_uuid, wce.composite_key, depth + 1 as depth
            FROM orgs
                     JOIN config_entry ce ON ce.parent_uuid = orgs.uuid
                     JOIN working_config_entry wce ON wce.config_entry_uuid = ce.uuid
        )
        SELECT o.uuid,
               o.name,
               o.type_id,
               o.version,
               o.parent_uuid,
               o.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM orgs o
                 join config_entry_type cet on cet.id = o.type_id
        ORDER BY depth ASC;
    </select>

    <select id="findColleaguesByCompositeKey" resultMap="colleagueMap">
        SELECT c.uuid,
        c.first_name,
        c.middle_name,
        c.last_name,
        c.email,
        c.primary_entity,
        c.salary_frequency,
        c.iam_source,
        c.iam_id,
        c.manager_uuid,
        c.employment_type,
        c.hire_date,
        c.leaving_date,
        c.is_manager,
        c.location_id,
        c.legal_entity,
        j.id as j_id,
        j.code as j_code,
        j.name as j_name,
        j.cost_category as j_costCategory,
        co.code as co_code,
        co.name as co_name,
        wl.code as wl_code,
        wl.name as wl_name,
        d.uuid as d_uuid,
        d.id as d_id,
        d.name as d_name,
        bt.uuid as bt_uuid,
        bt.name as bt_name
        FROM colleague c
        LEFT JOIN job j ON j.id = c.job_id
        JOIN country co ON co.code = c.country_code
        LEFT JOIN work_level wl ON wl.code = c.work_level
        LEFT OUTER JOIN department d ON d.uuid = c.department_uuid
        LEFT OUTER JOIN business_type bt ON d.business_type_uuid = bt.uuid
        <if test="statusFilter != null and !statusFilter.isEmpty()">
            LEFT JOIN pm_colleague_cycle pcc on c.uuid = pcc.colleague_uuid
        </if>
        <include refid="whereClauseFindColleagueByKey"/>

        <if test="statusFilter != null and !statusFilter.isEmpty()">
            AND <if test="!statusFilter.isInclude()">NOT</if> (COALESCE(STATUS_ID, -999) = ANY(ARRAY
            <foreach collection="statusFilter.getItems()" item="s" index="i" open="[" separator="," close="]">
                #{s.id}
            </foreach>
            ))
        </if>
    </select>

    <select id="isColleagueExistsForCompositeKey" resultType="boolean">
        SELECT CASE
        WHEN (EXISTS(SELECT true
        FROM colleague c
        LEFT JOIN job j ON j.id = c.job_id
        JOIN country co ON co.code = c.country_code
        LEFT JOIN work_level wl ON wl.code = c.work_level
        LEFT JOIN department d ON d.uuid = c.department_uuid
        <include refid="whereClauseFindColleagueByKey"/>
        AND c.uuid = #{colleagueUuid}))
        THEN true
        ELSE false
        END;
    </select>

    <sql id="whereClauseFindColleagueByKey">
        <where>
            <choose>
                <when test="key == 'overall_leadership/group_a/wl4_wl5'">
                    wl.code IN ('WL4', 'WL5')
                    AND (c.legal_entity IS NULL OR UPPER(c.legal_entity) NOT IN (
                    UPPER('TESCO (POLSKA) sp. z o.o.'),
                    UPPER('Tesco Underwriting Limited'),
                    UPPER('TESCO-GLOBAL Stores Privately Held Co. Ltd'),
                    UPPER('Tesco Pension Investment Limited'),
                    UPPER('Tesco Stores ČR a.s.'),
                    UPPER('Tesco Personal Finance PLC')))
                </when>
                <when test="key == 'overall_leadership/group_a/wl3'">
                    wl.code = 'WL3'
                    AND (c.legal_entity IS NULL OR UPPER(c.legal_entity) NOT IN (
                    UPPER('TESCO (POLSKA) sp. z o.o.'),
                    UPPER('Tesco Underwriting Limited'),
                    UPPER('TESCO-GLOBAL Stores Privately Held Co. Ltd'),
                    UPPER('Tesco Pension Investment Limited'),
                    UPPER('Tesco Stores ČR a.s.'),
                    UPPER('Tesco Personal Finance PLC'),
                    UPPER('Tesco International Sourcing Limited'),
                    UPPER('Tesco Sourcing India Private Ltd'),
                    UPPER('Tesco International Sourcing Limited Hong Kong'),
                    UPPER('Äì Sucursala Bucuresti'),
                    UPPER('Tesco Joint Buying Service (Shanghai) Co.')))
                    AND UPPER(c.iam_source) != UPPER('Tesco Mobile')
                </when>
                <otherwise>1!=1</otherwise>
            </choose>
        </where>
    </sql>
    <select id="findRootConfigEntry" resultMap="configEntryStructure">
        with recursive orgs as (
            select ce.uuid, ce.name, ce.type_id, ce.version, ce.parent_uuid, ce.composite_key, 0 as depth
            from config_entry ce
            where ce.uuid = #{uuid}
            union all
            select ce.uuid, ce.name, ce.type_id, ce.version, ce.parent_uuid, ce.composite_key, depth + 1 as depth
            from orgs
                     join config_entry ce on ce.uuid = orgs.parent_uuid
        )
        select o.uuid,
               o.name,
               o.type_id,
               o.version,
               o.composite_key,
               null            as parent_uuid,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        from orgs o
                 join config_entry_type cet on cet.id = o.type_id
        where depth = (select max(depth) from orgs)
    </select>

    <select id="getMaxVersionForRootEntry" resultType="int">
        SELECT COALESCE(MAX(version), 0)
        FROM config_entry
        WHERE name = #{name}
          AND type_id = #{typeId}
    </select>

    <select id="findConfigEntryParentStructure" resultMap="configEntryStructure">
        WITH RECURSIVE orgs AS (
            SELECT ce.uuid, name, ce.type_id, ce.version, ce.parent_uuid, ce.composite_key, 0 as depth
            FROM config_entry ce
            WHERE ce.uuid = #{uuid}
            UNION ALL
            SELECT ce.uuid, ce.name, ce.type_id, ce.version, ce.parent_uuid, ce.composite_key, depth + 1 as depth
            FROM orgs
                     JOIN config_entry ce ON ce.uuid = orgs.parent_uuid
        )
        SELECT o.uuid,
               o.name,
               o.type_id,
               o.version,
               o.parent_uuid,
               o.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM orgs o
                 join config_entry_type cet on cet.id = o.type_id
        ORDER BY depth DESC;
    </select>

    <select id="findConfigEntryChildStructure" resultMap="configEntryStructure">
        WITH RECURSIVE orgs AS (
            SELECT ce.uuid, name, ce.type_id, ce.version, ce.parent_uuid, ce.composite_key, 0 as depth
            FROM config_entry ce
            WHERE ce.uuid = #{uuid}
            UNION ALL
            SELECT ce.uuid, ce.name, ce.type_id, ce.version, ce.parent_uuid, ce.composite_key, depth + 1 as depth
            FROM orgs
                     JOIN config_entry ce ON ce.parent_uuid = orgs.uuid
        )
        SELECT o.uuid,
               o.name,
               o.type_id,
               o.version,
               o.parent_uuid,
               o.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM orgs o
                 join config_entry_type cet on cet.id = o.type_id
        ORDER BY depth ASC;
    </select>

    <select id="findPublishedConfigEntriesByKey" resultMap="configEntryStructure">
        SELECT ce.uuid,
               ce.name,
               ce.type_id,
               ce.version,
               ce.parent_uuid,
               ce.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM working_config_entry wce
                 JOIN config_entry ce ON wce.config_entry_uuid = ce.uuid
                 JOIN config_entry_type cet ON cet.id = wce.type_id
        WHERE wce.composite_key like #{key}
    </select>

    <select id="findConfigEntriesByKey" resultMap="configEntryStructure">
        SELECT ce.uuid,
               ce.name,
               ce.type_id,
               ce.version,
               ce.parent_uuid,
               ce.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM config_entry ce
                 JOIN config_entry_type cet ON cet.id = ce.type_id
        WHERE ce.composite_key like #{key}
    </select>

    <select id="findAllRootEntries" resultMap="configEntryStructure">
        SELECT ce.uuid,
               ce.name,
               ce.type_id,
               ce.version,
               ce.parent_uuid,
               ce.composite_key,
               cet.id          as t_id,
               cet.code        as t_code,
               cet.description as t_description
        FROM config_entry ce
                 JOIN config_entry_type cet ON cet.id = ce.type_id
        WHERE ce.parent_uuid is null
    </select>

    <select id="findConfigEntryType" resultType="com.tesco.pma.api.GeneralDictionaryItem">
        SELECT id, code, description
        FROM config_entry_type
        WHERE id = #{id}
    </select>

    <insert id="createConfigEntry" flushCache="true">
        INSERT INTO config_entry(uuid, name, type_id, version, parent_uuid, composite_key)
        VALUES (#{ce.uuid}, #{ce.name},
                #{ce.type.id},
                #{ce.version}, #{ce.parentUuid}, #{ce.compositeKey})
    </insert>

    <insert id="publishConfigEntry" flushCache="true">
        INSERT INTO working_config_entry(name, type_id, version, config_entry_uuid, composite_key)
        VALUES (#{wce.name},
                #{wce.type.id},
                #{wce.version}, #{wce.configEntryUuid}, #{wce.compositeKey})
    </insert>

    <delete id="unpublishConfigEntries" flushCache="true">
        DELETE
        FROM working_config_entry
        WHERE composite_key like #{key};
    </delete>

    <delete id="deleteConfigEntry" flushCache="true">
        DELETE
        FROM config_entry
        WHERE uuid = #{uuid};
    </delete>
</mapper>
