<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.organization_api.dao.OrganizationDAO">

    <resultMap id="colleagueTreeMap" type="com.tesco.organization_api.api.ColleagueOrganizationTree">
        <association property="colleague">
            <result property="uuid" column="colleague_uuid"/>
        </association>
        <association property="manager">
            <result property="uuid" column="manager_uuid"/>
        </association>
        <collection property="subordinates">
            <result property="uuid" column="subordinate_uuid"/>
        </collection>
    </resultMap>


    <select id="isColleagueSynced" resultType="boolean">
        SELECT CASE
                   WHEN (EXISTS(SELECT true
                                FROM colleague
                                WHERE uuid = #{colleagueUuid}
                                  AND is_synced = true) }))
        THEN true
        ELSE false
        END;
    </select>

    <select id="getColleagueTree" resultMap="colleagueTreeMap">
        SELECT c.uuis as colleague_uuid, m_wr.manager_uuid as manager_uuid, s_wp.colleague_uuis as subordinate_uuid
        FROM colleage c
                 LEFT JOIN work_relationship m_wr
                           ON c.uuid = m_wr.colleague_uuid AND m_wr.department_id = #{departmentId}
                 LEFT JOIN work_relationship s_wr
                           ON c.uuid = s_wr.manager_uuid AND s_wr.department_id = #{departmentId}
        WHERE c.uuid = #{colleagueUuid}
    </select>

    <select id="isDepartmentPresent" resultType="boolean">
        SELECT CASE
                   WHEN (EXISTS(SELECT true
                                FROM department
                                WHERE id = #{id}) }))
        THEN true
        ELSE false
        END;
    </select>

    <insert id="saveDepartment" flushCache="true">
        INSERT INTO departement(id, name, business_type, parent_id)
        VALUES (#{department.id}, #{department.name}, #{department.businessType}, NULL)
    </insert>

    <insert id="saveColleague" flushCache="true">
        INSERT INTO colleague(uuid, is_synced)
        VALUES (#{colleagueUuid}, #{synced}) ON CONFLICT uuid DO NOTHING
    </insert>

    <insert id="saveWorkRelationship" flushCache="true">
        INSERT INTO work_relationship(colleague_uuid, manager_uuid, department_id)
        VALUES (#{colleagueUuid}, #{managerUuid}, #{departmentId})
    </insert>

    <delete id="deleteWorkRelationshipByUuid">
        DELETE
        FROM work_relationship
        WHERE uuid = #{uuid}
    </delete>

    <delete id="deleteWorkRelationship">
        DELETE
        FROM work_relationship
        WHERE colleague_uuid = #{colleagueUuid}
          AND manager_uuid = #{managerUuid}
          AND department_id = #{departmentId}
    </delete>

</mapper>