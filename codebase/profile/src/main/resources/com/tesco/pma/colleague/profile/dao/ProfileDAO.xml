<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tesco.pma.colleague.profile.dao.ProfileDAO">

    <resultMap id="colleagueMap" type="com.tesco.pma.colleague.profile.domain.ColleagueEntity">
        <id column="uuid" property="uuid"/>
        <result column="first_name" property="firstName"/>
        <result column="middle_name" property="middleName"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="primary_entity" property="primaryEntity"/>
        <result column="salary_frequency" property="salaryFrequency"/>
        <result column="iam_source" property="iamSource"/>
        <result column="iam_id" property="iamId"/>
        <result column="manager_uuid" property="managerUuid"/>
        <result column="employment_type" property="employmentType"/>
        <result column="hire_date" property="hireDate"/>
        <result column="leaving_date" property="leavingDate"/>
        <result column="is_manager" property="manager"/>
        <association property="job" autoMapping="true" columnPrefix="j_"/>
        <association property="country" autoMapping="true" columnPrefix="co_"/>
        <association property="workLevel" autoMapping="true" columnPrefix="wl_"/>
        <association property="department" autoMapping="true" columnPrefix="d_"/>
    </resultMap>

    <select id="getColleague" resultMap="colleagueMap">
        SELECT c.uuid,
               c.first_name,
               c.middle_name,
               c.last_name,
               c.email,
               c.primary_entity,
               c.salary_frequency,
               c.iam_source,
               c.iam_id,
               c.manager_uuid,
               c.employment_type,
               c.hire_date,
               c.leaving_date,
               c.is_manager,
               j.id            as j_id,
               j.code          as j_code,
               j.name          as j_name,
               j.cost_category as j_costCategory,
               co.code         as co_code,
               co.name         as co_name,
               wl.code         as wl_code,
               wl.name         as wl_name,
               d.id            as d_id,
               d.name          as d_name,
               d.business_type as d_businessType
        FROM colleague c
                 JOIN job j ON j.id = c.job_id
                 JOIN country co ON co.code = c.country_code
                 JOIN work_level wl ON wl.code = c.work_level
                 JOIN department d ON d.id = c.department_id
        WHERE c.uuid = #{colleagueUuid}
    </select>

    <select id="getColleagueByIamId" resultMap="colleagueMap">
        SELECT c.uuid,
               c.first_name,
               c.middle_name,
               c.last_name,
               c.email,
               c.primary_entity,
               c.salary_frequency,
               c.iam_source,
               c.iam_id,
               c.manager_uuid,
               c.employment_type,
               c.hire_date,
               c.leaving_date,
               c.is_manager,
               j.id            as j_id,
               j.code          as j_code,
               j.name          as j_name,
               j.cost_category as j_costCategory,
               co.code         as co_code,
               co.name         as co_name,
               wl.code         as wl_code,
               wl.name         as wl_name,
               d.id            as d_id,
               d.name          as d_name,
               d.business_type as d_businessType
        FROM colleague c
                 JOIN job j ON j.id = c.job_id
                 JOIN country co ON co.code = c.country_code
                 JOIN work_level wl ON wl.code = c.work_level
                 JOIN department d ON d.id = c.department_id
        WHERE c.iam_id = #{iamId}
    </select>

    <insert id="saveWorkLevel" flushCache="true">
        INSERT INTO work_level(code, name)
        VALUES (#{workLevel.code}, #{workLevel.name}) ON CONFLICT(code) DO NOTHING
    </insert>

    <insert id="saveCountry" flushCache="true">
        INSERT INTO country(code, name)
        VALUES (#{country.code}, #{country.name}) ON CONFLICT(code) DO NOTHING
    </insert>

    <insert id="saveDepartment" flushCache="true">
        INSERT INTO department(id, name, business_type)
        VALUES (#{department.id}, #{department.name}, #{department.businessType}) ON CONFLICT(id) DO NOTHING
    </insert>

    <insert id="saveJob" flushCache="true">
        INSERT INTO job(id, code, name, cost_category)
        VALUES (#{job.id}, #{job.code}, #{job.name}, #{job.costCategory}) ON CONFLICT(id) DO NOTHING
    </insert>

    <insert id="saveColleague" flushCache="true">
        INSERT INTO colleague(uuid, first_name, middle_name, last_name, email, primary_entity,
                              salary_frequency, iam_source, iam_id, manager_uuid, employment_type,
                              hire_date, leaving_date, is_manager, job_id, country_code, work_level, department_id)
        VALUES (#{colleague.uuid}, #{colleague.firstName}, #{colleague.middleName}, #{colleague.lastName},
                #{colleague.email}, #{colleague.primaryEntity}, #{colleague.salaryFrequency}, #{colleague.iamSource},
                #{colleague.iamId}, #{colleague.managerUuid}, #{colleague.employmentType}, #{colleague.hireDate},
                #{colleague.leavingDate}, #{colleague.manager}, #{colleague.job.id}, #{colleague.country.code},
                #{colleague.workLevel.code}, #{colleague.department.id}) ON CONFLICT(uuid) DO
        UPDATE
            SET first_name = #{colleague.firstName}, middle_name = #{colleague.middleName}, last_name = #{colleague.lastName},
            email = #{colleague.email}, primary_entity = #{colleague.primaryEntity}, salary_frequency = #{colleague.salaryFrequency},
            iam_source = #{colleague.iamSource}, iam_id = #{colleague.iamId}, manager_uuid = #{colleague.managerUuid},
            employment_type = #{colleague.employmentType}, hire_date = #{colleague.hireDate}, leaving_date = #{colleague.leavingDate},
            is_manager = #{colleague.manager}, job_id = #{colleague.job.id}, country_code = #{colleague.country.code},
            work_level = #{colleague.workLevel.code}, department_id = #{colleague.department.id}
    </insert>

    <update id="updateColleagueManager" flushCache="true">
        UPDATE colleague
        SET manager_uuid= #{managerUuid}
        WHERE uuid = #{colleagueUuid}
    </update>

    <select id="isColleagueExists" resultType="boolean">
        SELECT CASE
                   WHEN (EXISTS(SELECT true
                                FROM colleague
                                WHERE uuid = #{uuid}))
                       THEN true
                   ELSE false
                   END;
    </select>

    <insert id="insertJob" flushCache="true">
        INSERT INTO job (id, code, name, cost_category)
        VALUES (#{job.id},
                #{job.code},
                #{job.name},
                #{job.costCategory})
            ON CONFLICT (id) DO UPDATE SET
                                    (code, name, cost_category) = (EXCLUDED.code, EXCLUDED.name, EXCLUDED.cost_category)
    </insert>

    <insert id="insertCountry" flushCache="true">
        INSERT INTO country (code, name)
        VALUES (#{country.code},
                #{country.name})
            ON CONFLICT (code) DO UPDATE SET
            name = EXCLUDED.name
    </insert>

    <insert id="insertWorkLevel" flushCache="true">
        INSERT INTO work_level (code, name)
        VALUES (#{workLevel.code},
                #{workLevel.name})
            ON CONFLICT (code) DO UPDATE SET
            name = EXCLUDED.name
    </insert>

    <insert id="insertDepartment" flushCache="true">
        INSERT INTO department (id, name, business_type)
        VALUES (#{department.id},
                #{department.name},
                #{department.businessType})
            ON CONFLICT (id) DO UPDATE SET
                                    (name, business_type) = (EXCLUDED.name, EXCLUDED.business_type)
    </insert>

</mapper>